if (is.nan(se_coef) == TRUE | is.nan(co) == TRUE) {
p_value <- 1
} else {
p_value <- round(2 * (1 - pnorm(abs(ss))), digits = 4)
}
print("p_value")
print(p_value)
#if (p_value)
if (p_value < 0.1 ) {
pocet_ss <- pocet_ss + 1
print(i)
b <- colnames(gt_dss)[i]
cat(red(b))
informace <- c(as.character(colnames(gt_dss)[i]), p_value, arima_model$aic, arima_model$aicc, arima_model$bic)
ssm <- rbind(ssm, informace)
#grafika
# Generate the fitted values
fitted_values <- arima_model$fitted
# Plot the actual and fitted values
plot(ts_real_inf, main = paste("ARIMA(",ar,",",d,",",ma,") Fitted Values for Inflation"),
xlab = "Time", ylab = b)
lines(fitted_values, col = "red")
legend("topleft", legend = c("Actual", "Fitted", as.character(p_value),
as.character(b),
as.character(end)), lty = c(1,1), col = c("black", "red", "blue", "red", "purple", "purple"))
} else {
print(colnames(gt_dss)[i])
}
if (i ==ncol(gt_dss)){
print(paste("Pocet statisticky signifikantnich promennych je", pocet_ss))
print(ssm)
}
}
}
for (ar in 1:3) {
for (i in 1:ncol(gt_dss)) {
if (i == 1){
pocet_ss <- 0
arima_model <- forecast::Arima(ts_real_inf, order = c(ar,d,ma))
ssm <- matrix(c("originalni model", NA, arima_model$aic, arima_model$aicc, arima_model$bic), nrow = 1)
colnames(ssm) <- c("promenna", "p-value", "AIC","AICc","BIC")
plot(ts_real_inf, main = paste("ARIMA(",ar,",",d,",",ma,") Fitted Values for Inflation"),
xlab = "Time", ylab = colnames(gt_dss)[i])
fitted_values <- arima_model$fitted
lines(fitted_values, col = "red")
legend("topleft", legend = c("Actual", "Fitted", as.character(end)), lty = c(1,1), col = c("black", "red", "blue", "blue", "purple", "purple"))
}
print(i)
regresor <- ts(data = gt_dss[,i], start = c(2004, 1), end = end, frequency = 12)
regresor <- regresor / mean(regresor) * mean(ts_real_inf)
opposite_lag <- function(x, k) {
c(tail(x, -k), rep(NA, k))
}
ext_regressor <- regresor
future_values <- opposite_lag(ext_regressor, 1)
# Combine the original external regressor and its future values into a matrix
ext_regressors <- cbind(ext_regressor, future_values)
colnames(ext_regressors) <- c("ext_regressor", "future_values")
# Remove the last row, as it contains NA for future_values
ext_regressors <- ts(future_values[-length(future_values)], start = start, frequency = 12) #ext_regressors[-nrow(ext_regressors), ]
# Remove the last observation from the data as well
ts_real_inf_2 <- ts_real_inf[-length(ts_real_inf)]
ts_real_inf_2 <- ts(ts_real_inf_2, start = start, frequency = 12)
arima_model <- try(forecast::Arima(ts_real_inf_2, order = c(ar,d,ma), xreg = ext_regressors))
#arima_model <- try(forecast::Arima(ts_real_inf, order = c(ar,d,ma), xreg = regresor))
# Check if there was an error
if (!inherits(arima_model, "try-error")) {
# Store the ARIMA model in the list if no error occurred
} else {
# Print a message and continue to the next iteration if an error occurred
cat("Error encountered for ARIMA(", i, ", 0, 0). Skipping this model.\n")
next  # Continue to the next iteration
}
summary(arima_model) %>% print
se_coef <- sqrt(diag(arima_model$var.coef))["xreg"]
co <- arima_model$coef["xreg"]
ss <- co/ se_coef
if (is.nan(se_coef) == TRUE | is.nan(co) == TRUE) {
p_value <- 1
} else {
p_value <- round(2 * (1 - pnorm(abs(ss))), digits = 4)
}
print("p_value")
print(p_value)
#if (p_value)
if (p_value < 0.1 ) {
pocet_ss <- pocet_ss + 1
print(i)
b <- colnames(gt_dss)[i]
cat(red(b))
informace <- c(as.character(colnames(gt_dss)[i]), p_value, arima_model$aic, arima_model$aicc, arima_model$bic)
ssm <- rbind(ssm, informace)
#grafika
# Generate the fitted values
fitted_values <- arima_model$fitted
# Plot the actual and fitted values
plot(ts_real_inf, main = paste("ARIMA(",ar,",",d,",",ma,") Fitted Values for Inflation"),
xlab = "Time", ylab = b)
lines(fitted_values, col = "red")
legend("topleft", legend = c("Actual", "Fitted", as.character(p_value),
as.character(b),
as.character(end)), lty = c(1,1), col = c("black", "red", "blue", "red", "purple", "purple"))
} else {
print(colnames(gt_dss)[i])
}
if (i ==ncol(gt_dss)){
print(paste("Pocet statisticky signifikantnich promennych je", pocet_ss))
print(ssm)
}
}
}
for (ar in 1:3) {
for (i in 1:ncol(gt_dss)) {
if (i == 1 & ar == 1){
pocet_ss <- 0
arima_model <- forecast::Arima(ts_real_inf, order = c(ar,d,ma))
ssm <- matrix(c("originalni model", NA, arima_model$aic, arima_model$aicc, arima_model$bic), nrow = 1)
colnames(ssm) <- c("promenna", "p-value", "AIC","AICc","BIC")
plot(ts_real_inf, main = paste("ARIMA(",ar,",",d,",",ma,") Fitted Values for Inflation"),
xlab = "Time", ylab = colnames(gt_dss)[i])
fitted_values <- arima_model$fitted
lines(fitted_values, col = "red")
legend("topleft", legend = c("Actual", "Fitted", as.character(end)), lty = c(1,1), col = c("black", "red", "blue", "blue", "purple", "purple"))
}
print(i)
regresor <- ts(data = gt_dss[,i], start = c(2004, 1), end = end, frequency = 12)
regresor <- regresor / mean(regresor) * mean(ts_real_inf)
opposite_lag <- function(x, k) {
c(tail(x, -k), rep(NA, k))
}
ext_regressor <- regresor
future_values <- opposite_lag(ext_regressor, 1)
# Combine the original external regressor and its future values into a matrix
ext_regressors <- cbind(ext_regressor, future_values)
colnames(ext_regressors) <- c("ext_regressor", "future_values")
# Remove the last row, as it contains NA for future_values
ext_regressors <- ts(future_values[-length(future_values)], start = start, frequency = 12) #ext_regressors[-nrow(ext_regressors), ]
# Remove the last observation from the data as well
ts_real_inf_2 <- ts_real_inf[-length(ts_real_inf)]
ts_real_inf_2 <- ts(ts_real_inf_2, start = start, frequency = 12)
arima_model <- try(forecast::Arima(ts_real_inf_2, order = c(ar,d,ma), xreg = ext_regressors))
#arima_model <- try(forecast::Arima(ts_real_inf, order = c(ar,d,ma), xreg = regresor))
# Check if there was an error
if (!inherits(arima_model, "try-error")) {
# Store the ARIMA model in the list if no error occurred
} else {
# Print a message and continue to the next iteration if an error occurred
cat("Error encountered for ARIMA(", i, ", 0, 0). Skipping this model.\n")
next  # Continue to the next iteration
}
summary(arima_model) %>% print
se_coef <- sqrt(diag(arima_model$var.coef))["xreg"]
co <- arima_model$coef["xreg"]
ss <- co/ se_coef
if (is.nan(se_coef) == TRUE | is.nan(co) == TRUE) {
p_value <- 1
} else {
p_value <- round(2 * (1 - pnorm(abs(ss))), digits = 4)
}
print("p_value")
print(p_value)
#if (p_value)
if (p_value < 0.1 ) {
pocet_ss <- pocet_ss + 1
print(i)
b <- colnames(gt_dss)[i]
cat(red(b))
informace <- c(as.character(colnames(gt_dss)[i]), p_value, arima_model$aic, arima_model$aicc, arima_model$bic)
ssm <- rbind(ssm, informace)
#grafika
# Generate the fitted values
fitted_values <- arima_model$fitted
# Plot the actual and fitted values
plot(ts_real_inf, main = paste("ARIMA(",ar,",",d,",",ma,") Fitted Values for Inflation"),
xlab = "Time", ylab = b)
lines(fitted_values, col = "red")
legend("topleft", legend = c("Actual", "Fitted", as.character(p_value),
as.character(b),
as.character(end)), lty = c(1,1), col = c("black", "red", "blue", "red", "purple", "purple"))
} else {
print(colnames(gt_dss)[i])
}
if (i ==ncol(gt_dss)){
print(paste("Pocet statisticky signifikantnich promennych je", pocet_ss))
print(ssm)
}
}
}
c(0:1)
for (ar in 1:3) {
for (d in 0:2) {
for (ma in 1:3) {
for (i in 1:ncol(gt_dss)) {
if (i == 1 & ar == 1){
pocet_ss <- 0
arima_model <- forecast::Arima(ts_real_inf, order = c(ar,d,ma))
ssm <- matrix(c("originalni model", NA, arima_model$aic, arima_model$aicc, arima_model$bic, ar, d, ma), nrow = 1)
colnames(ssm) <- c("promenna", "p-value", "AIC","AICc","BIC", "AR", "I", "MA")
plot(ts_real_inf, main = paste("ARIMA(",ar,",",d,",",ma,") Fitted Values for Inflation"),
xlab = "Time", ylab = colnames(gt_dss)[i])
fitted_values <- arima_model$fitted
lines(fitted_values, col = "red")
legend("topleft", legend = c("Actual", "Fitted", as.character(end)), lty = c(1,1), col = c("black", "red", "blue", "blue", "purple", "purple"))
}
print(i)
regresor <- ts(data = gt_dss[,i], start = c(2004, 1), end = end, frequency = 12)
regresor <- regresor / mean(regresor) * mean(ts_real_inf)
opposite_lag <- function(x, k) {
c(tail(x, -k), rep(NA, k))
}
ext_regressor <- regresor
future_values <- opposite_lag(ext_regressor, 1)
# Combine the original external regressor and its future values into a matrix
ext_regressors <- cbind(ext_regressor, future_values)
colnames(ext_regressors) <- c("ext_regressor", "future_values")
# Remove the last row, as it contains NA for future_values
ext_regressors <- ts(future_values[-length(future_values)], start = start, frequency = 12) #ext_regressors[-nrow(ext_regressors), ]
# Remove the last observation from the data as well
ts_real_inf_2 <- ts_real_inf[-length(ts_real_inf)]
ts_real_inf_2 <- ts(ts_real_inf_2, start = start, frequency = 12)
arima_model <- try(forecast::Arima(ts_real_inf_2, order = c(ar,d,ma), xreg = ext_regressors))
#arima_model <- try(forecast::Arima(ts_real_inf, order = c(ar,d,ma), xreg = regresor))
# Check if there was an error
if (!inherits(arima_model, "try-error")) {
# Store the ARIMA model in the list if no error occurred
} else {
# Print a message and continue to the next iteration if an error occurred
cat("Error encountered for ARIMA(", i, ", 0, 0). Skipping this model.\n")
next  # Continue to the next iteration
}
summary(arima_model) %>% print
se_coef <- sqrt(diag(arima_model$var.coef))["xreg"]
co <- arima_model$coef["xreg"]
ss <- co/ se_coef
if (is.nan(se_coef) == TRUE | is.nan(co) == TRUE) {
p_value <- 1
} else {
p_value <- round(2 * (1 - pnorm(abs(ss))), digits = 4)
}
print("p_value")
print(p_value)
#if (p_value)
if (p_value < 0.1 ) {
pocet_ss <- pocet_ss + 1
print(i)
b <- colnames(gt_dss)[i]
cat(red(b))
informace <- c(as.character(colnames(gt_dss)[i]), p_value, arima_model$aic, arima_model$aicc, arima_model$bic)
ssm <- rbind(ssm, informace)
#grafika
# Generate the fitted values
fitted_values <- arima_model$fitted
# Plot the actual and fitted values
plot(ts_real_inf, main = paste("ARIMA(",ar,",",d,",",ma,") Fitted Values for Inflation"),
xlab = "Time", ylab = b)
lines(fitted_values, col = "red")
legend("topleft", legend = c("Actual", "Fitted", as.character(p_value),
as.character(b),
as.character(end)), lty = c(1,1), col = c("black", "red", "blue", "red", "purple", "purple"))
} else {
print(colnames(gt_dss)[i])
}
if (i ==ncol(gt_dss)){
print(paste("Pocet statisticky signifikantnich promennych je", pocet_ss))
print(ssm)
}
}
}
}
}
r
for (ar in 1:3) {
for (d in 0:2) {
for (ma in 1:3) {
for (i in 1:ncol(gt_dss)) {
if (i == 1){
pocet_ss <- 0
arima_model <- forecast::Arima(ts_real_inf, order = c(ar,d,ma))
ssm <- matrix(c("originalni model", NA, arima_model$aic, arima_model$aicc, arima_model$bic, ar, d, ma), nrow = 1)
colnames(ssm) <- c("promenna", "p-value", "AIC","AICc","BIC", "AR", "I", "MA")
plot(ts_real_inf, main = paste("ARIMA(",ar,",",d,",",ma,") Fitted Values for Inflation"),
xlab = "Time", ylab = colnames(gt_dss)[i])
fitted_values <- arima_model$fitted
lines(fitted_values, col = "red")
legend("topleft", legend = c("Actual", "Fitted", as.character(end)), lty = c(1,1), col = c("black", "red", "blue", "blue", "purple", "purple"))
}
print(i)
regresor <- ts(data = gt_dss[,i], start = c(2004, 1), end = end, frequency = 12)
regresor <- regresor / mean(regresor) * mean(ts_real_inf)
opposite_lag <- function(x, k) {
c(tail(x, -k), rep(NA, k))
}
ext_regressor <- regresor
future_values <- opposite_lag(ext_regressor, 1)
# Combine the original external regressor and its future values into a matrix
ext_regressors <- cbind(ext_regressor, future_values)
colnames(ext_regressors) <- c("ext_regressor", "future_values")
# Remove the last row, as it contains NA for future_values
ext_regressors <- ts(future_values[-length(future_values)], start = start, frequency = 12) #ext_regressors[-nrow(ext_regressors), ]
# Remove the last observation from the data as well
ts_real_inf_2 <- ts_real_inf[-length(ts_real_inf)]
ts_real_inf_2 <- ts(ts_real_inf_2, start = start, frequency = 12)
arima_model <- try(forecast::Arima(ts_real_inf_2, order = c(ar,d,ma), xreg = ext_regressors))
#arima_model <- try(forecast::Arima(ts_real_inf, order = c(ar,d,ma), xreg = regresor))
# Check if there was an error
if (!inherits(arima_model, "try-error")) {
# Store the ARIMA model in the list if no error occurred
} else {
# Print a message and continue to the next iteration if an error occurred
cat("Error encountered for ARIMA(", i, ", 0, 0). Skipping this model.\n")
next  # Continue to the next iteration
}
summary(arima_model) %>% print
se_coef <- sqrt(diag(arima_model$var.coef))["xreg"]
co <- arima_model$coef["xreg"]
ss <- co/ se_coef
if (is.nan(se_coef) == TRUE | is.nan(co) == TRUE) {
p_value <- 1
} else {
p_value <- round(2 * (1 - pnorm(abs(ss))), digits = 4)
}
print("p_value")
print(p_value)
#if (p_value)
if (p_value < 0.1 ) {
pocet_ss <- pocet_ss + 1
print(i)
b <- colnames(gt_dss)[i]
cat(red(b))
informace <- c(as.character(colnames(gt_dss)[i]), p_value, arima_model$aic, arima_model$aicc, arima_model$bic, ar, d, ma)
ssm <- rbind(ssm, informace)
#grafika
# Generate the fitted values
fitted_values <- arima_model$fitted
# Plot the actual and fitted values
plot(ts_real_inf, main = paste("ARIMA(",ar,",",d,",",ma,") Fitted Values for Inflation"),
xlab = "Time", ylab = b)
lines(fitted_values, col = "red")
legend("topleft", legend = c("Actual", "Fitted", as.character(p_value),
as.character(b),
as.character(end)), lty = c(1,1), col = c("black", "red", "blue", "red", "purple", "purple"))
} else {
print(colnames(gt_dss)[i])
}
if (i ==ncol(gt_dss)){
print(paste("Pocet statisticky signifikantnich promennych je", pocet_ss))
print(ssm)
}
}
}
}
}
for (ar in 1:3) {
for (d in 0:2) {
for (ma in 1:3) {
for (i in 1:ncol(gt_dss)) {
if (i == 1){
pocet_ss <- 0
arima_model <- forecast::Arima(ts_real_inf, order = c(ar,d,ma))
if (ar == 1 & d == 0 & ma ==1) {
ssm <- matrix(c("originalni model", NA, arima_model$aic, arima_model$aicc, arima_model$bic, ar, d, ma), nrow = 1)
}
colnames(ssm) <- c("promenna", "p-value", "AIC","AICc","BIC", "AR", "I", "MA")
plot(ts_real_inf, main = paste("ARIMA(",ar,",",d,",",ma,") Fitted Values for Inflation"),
xlab = "Time", ylab = colnames(gt_dss)[i])
fitted_values <- arima_model$fitted
lines(fitted_values, col = "red")
legend("topleft", legend = c("Actual", "Fitted", as.character(end)), lty = c(1,1), col = c("black", "red", "blue", "blue", "purple", "purple"))
}
print(i)
regresor <- ts(data = gt_dss[,i], start = c(2004, 1), end = end, frequency = 12)
regresor <- regresor / mean(regresor) * mean(ts_real_inf)
opposite_lag <- function(x, k) {
c(tail(x, -k), rep(NA, k))
}
ext_regressor <- regresor
future_values <- opposite_lag(ext_regressor, 1)
# Combine the original external regressor and its future values into a matrix
ext_regressors <- cbind(ext_regressor, future_values)
colnames(ext_regressors) <- c("ext_regressor", "future_values")
# Remove the last row, as it contains NA for future_values
ext_regressors <- ts(future_values[-length(future_values)], start = start, frequency = 12) #ext_regressors[-nrow(ext_regressors), ]
# Remove the last observation from the data as well
ts_real_inf_2 <- ts_real_inf[-length(ts_real_inf)]
ts_real_inf_2 <- ts(ts_real_inf_2, start = start, frequency = 12)
arima_model <- try(forecast::Arima(ts_real_inf_2, order = c(ar,d,ma), xreg = ext_regressors))
#arima_model <- try(forecast::Arima(ts_real_inf, order = c(ar,d,ma), xreg = regresor))
# Check if there was an error
if (!inherits(arima_model, "try-error")) {
# Store the ARIMA model in the list if no error occurred
} else {
# Print a message and continue to the next iteration if an error occurred
cat("Error encountered for ARIMA(", i, ", 0, 0). Skipping this model.\n")
next  # Continue to the next iteration
}
summary(arima_model) %>% print
se_coef <- sqrt(diag(arima_model$var.coef))["xreg"]
co <- arima_model$coef["xreg"]
ss <- co/ se_coef
if (is.nan(se_coef) == TRUE | is.nan(co) == TRUE) {
p_value <- 1
} else {
p_value <- round(2 * (1 - pnorm(abs(ss))), digits = 4)
}
print("p_value")
print(p_value)
#if (p_value)
if (p_value < 0.1 ) {
pocet_ss <- pocet_ss + 1
print(i)
b <- colnames(gt_dss)[i]
cat(red(b))
informace <- c(as.character(colnames(gt_dss)[i]), p_value, arima_model$aic, arima_model$aicc, arima_model$bic, ar, d, ma)
ssm <- rbind(ssm, informace)
#grafika
# Generate the fitted values
fitted_values <- arima_model$fitted
# Plot the actual and fitted values
plot(ts_real_inf, main = paste("ARIMA(",ar,",",d,",",ma,") Fitted Values for Inflation"),
xlab = "Time", ylab = b)
lines(fitted_values, col = "red")
legend("topleft", legend = c("Actual", "Fitted", as.character(p_value),
as.character(b),
as.character(end)), lty = c(1,1), col = c("black", "red", "blue", "red", "purple", "purple"))
} else {
print(colnames(gt_dss)[i])
}
if (i ==ncol(gt_dss)){
print(paste("Pocet statisticky signifikantnich promennych je", pocet_ss))
print(ssm)
}
}
}
}
}
for (i in 1:ncol(gt_dss)) {
if (i == 1){
arima_model <- forecast::Arima(ts_real_inf, order = c(ar,d,ma))
if (ar == 1 & d == 0 & ma ==1) {
ssm <- matrix(c("originalni model", NA, arima_model$aic, arima_model$aicc, arima_model$bic, ar, d, ma), nrow = 1)
colnames(ssm) <- c("promenna", "p-value", "AIC","AICc","BIC", "AR", "I", "MA")
pocet_ss <- 0
}
plot(ts_real_inf, main = paste("ARIMA(",ar,",",d,",",ma,") Fitted Values for Inflation"),
xlab = "Time", ylab = colnames(gt_dss)[i])
fitted_values <- arima_model$fitted
lines(fitted_values, col = "red")
legend("topleft", legend = c("Actual", "Fitted", as.character(end)), lty = c(1,1), col = c("black", "red", "blue", "blue", "purple", "purple"))
}
print(i)
regresor <- ts(data = gt_dss[,i], start = c(2004, 1), end = end, frequency = 12)
regresor <- regresor / mean(regresor) * mean(ts_real_inf)
opposite_lag <- function(x, k) {
c(tail(x, -k), rep(NA, k))
}
ext_regressor <- regresor
future_values <- opposite_lag(ext_regressor, 1)
# Combine the original external regressor and its future values into a matrix
ext_regressors <- cbind(ext_regressor, future_values)
colnames(ext_regressors) <- c("ext_regressor", "future_values")
# Remove the last row, as it contains NA for future_values
ext_regressors <- ts(future_values[-length(future_values)], start = start, frequency = 12) #ext_regressors[-nrow(ext_regressors), ]
# Remove the last observation from the data as well
ts_real_inf_2 <- ts_real_inf[-length(ts_real_inf)]
ts_real_inf_2 <- ts(ts_real_inf_2, start = start, frequency = 12)
arima_model <- try(forecast::Arima(ts_real_inf_2, order = c(ar,d,ma), xreg = ext_regressors))
#arima_model <- try(forecast::Arima(ts_real_inf, order = c(ar,d,ma), xreg = regresor))
# Check if there was an error
if (!inherits(arima_model, "try-error")) {
# Store the ARIMA model in the list if no error occurred
} else {
# Print a message and continue to the next iteration if an error occurred
cat("Error encountered for ARIMA(", i, ", 0, 0). Skipping this model.\n")
next  # Continue to the next iteration
}
summary(arima_model) %>% print
se_coef <- sqrt(diag(arima_model$var.coef))["xreg"]
co <- arima_model$coef["xreg"]
ss <- co/ se_coef
if (is.nan(se_coef) == TRUE | is.nan(co) == TRUE) {
p_value <- 1
} else {
p_value <- round(2 * (1 - pnorm(abs(ss))), digits = 4)
}
print("p_value")
print(p_value)
#if (p_value)
if (p_value < 0.1 ) {
pocet_ss <- pocet_ss + 1
print(i)
b <- colnames(gt_dss)[i]
cat(red(b))
informace <- c(as.character(colnames(gt_dss)[i]), p_value, arima_model$aic, arima_model$aicc, arima_model$bic, ar, d, ma)
ssm <- rbind(ssm, informace)
#grafika
# Generate the fitted values
fitted_values <- arima_model$fitted
# Plot the actual and fitted values
plot(ts_real_inf, main = paste("ARIMA(",ar,",",d,",",ma,") Fitted Values for Inflation"),
xlab = "Time", ylab = b)
lines(fitted_values, col = "red")
legend("topleft", legend = c("Actual", "Fitted", as.character(p_value),
as.character(b),
as.character(end)), lty = c(1,1), col = c("black", "red", "blue", "red", "purple", "purple"))
} else {
print(colnames(gt_dss)[i])
}
if (i ==ncol(gt_dss)){
print(paste("Pocet statisticky signifikantnich promennych je", pocet_ss))
print(ssm)
}
}
