<<<<<<< HEAD
######################################################################################################
# Arima
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ar <- 1
d  <- 1
ma <- 1 #jednicka idealni
# Srovnani s arimou bez external regresoru
arima_model <- forecast::Arima(ts_real_inf, order = c(ar,d,ma))
ssm <- matrix(c("originalni model", NA, arima_model$aic, arima_model$aicc, arima_model$bic, ar, d, ma, "lag", "Vojta", "je", "debil"), nrow = 1, ncol = length(jmena_sloupecku))
colnames(ssm) <- jmena_sloupecku
pocet_ss <- 0
opposite_lag <- function(x, k) {
c(tail(x, -k), rep(NA, k))
}
# Remove the last observation from the data as well
ts_real_inf_2 <- ts_real_inf[-length(ts_real_inf)]
ts_real_inf_2 <- ts(ts_real_inf_2, start = start, frequency = 12)
ts_real_inf_3 <- ts_real_inf[-1]
ts_real_inf_3 <- ts(ts_real_inf_3, start = c(start[1], (start[2] + 1)), frequency = 12)
cifry <- 9
######################################################################################################
for (ar in 1:3) {
for (d in 0:1) {
for (ma in 1:3) {
for (i in 1:ncol(gt_dss)) {
debug_print(i)
regresor <- ts(data = gt_dss[,i], start = c(2004, 1), end = end, frequency = 12)
regresor <- regresor / mean(regresor) * mean(ts_real_inf)
#print(regresor)
for (promenna in c("regresor","delay", "posun_vpred")) {
rozeznani_do_tabulky <- promenna
if (promenna == "regresor") {
arima_model <- try(forecast::Arima(ts_real_inf, order = c(ar,d,ma), xreg = regresor))
} else if(promenna == "delay"){
ext_regressor <- regresor
#future_values <- opposite_lag(ext_regressor, 1)
posun <- 1
future_values <- stats::lag(ext_regressor, posun)
ext_regressors <- ts(future_values[-(1:posun)], start = c(start[1], (start[2])), frequency = 12)
#ext_regressors <- ts(regresor, start = c(start[1], (start[2]+1)))
arima_model <- try(forecast::Arima(ts_real_inf_3, order = c(ar,d,ma), xreg = ext_regressors))
#print(ext_regressors)
#print(ts_real_inf_3)
#print("Konec")
} else if(promenna == "posun_vpred") {
ext_regressor <- regresor
posun <- 1
future_values <- opposite_lag(ext_regressor, posun)
# Remove the last row, as it contains NA for future_values
ext_regressors <- ts(future_values[-length(future_values)], start = start, frequency = 12) #ext_regressors[-nrow(ext_regressors), ]
arima_model <- try(forecast::Arima(ts_real_inf_2, order = c(ar,d,ma), xreg = ext_regressors))
}
# Pro pripad multiple regression
# Combine the original external regressor and its future values into a matrix
#ext_regressors <- cbind(ext_regressor, future_values)
#colnames(ext_regressors) <- c("ext_regressor", "future_values")
#
# Check if there was an error
if (!inherits(arima_model, "try-error")) {
# Store the ARIMA model in the list if no error occurred
} else {
# Print a message and continue to the next iteration if an error occurred
cat("Error encountered for ARIMA(", i) # . Skipping this model.\n")
next  # Continue to the next iteration
}
se_coef <- sqrt(diag(arima_model$var.coef))["xreg"]
co <- arima_model$coef["xreg"]
ss <- co/ se_coef
if (is.nan(se_coef) == TRUE | is.nan(co) == TRUE) {
p_value <- 1
} else {
p_value <- round(2 * (1 - pnorm(abs(ss))), digits = 4)
}
if (p_value < 0.1 ) {
debug_print("p_value")
debug_print(p_value)
pocet_ss <- pocet_ss + 1
debug_print(i)
b <- colnames(gt_dss)[i]
cat(red(b))
moje_aic <- round(arima_model$aic, digits = cifry)
moje_aicc <- round(arima_model$aicc, digits = cifry)
moje_bic <- round(arima_model$bic, digits = cifry)
if (rozeznani_do_tabulky == "regresor") {
srovnavaci_model <- try(forecast::Arima(ts_real_inf, order = c(ar,d,ma)))
srovnavaci_vektor <- c(as.character(ar), as.character(d), as.character(ma), srovnavaci_model$aic, srovnavaci_model$aicc, srovnavaci_model$bic)
originalni_modely <- rbind(originalni_modely,srovnavaci_vektor)
} else if (rozeznani_do_tabulky == "delay") {
srovnavaci_model <- try(forecast::Arima(ts_real_inf_3, order = c(ar,d,ma)))
srovnavaci_vektor <- c(as.character(ar), as.character(d), as.character(ma), srovnavaci_model$aic, srovnavaci_model$aicc, srovnavaci_model$bic)
originalni_modely <- rbind(originalni_modely, srovnavaci_vektor)
} else if (rozeznani_do_tabulky == "posun_vpred") {
srovnavaci_model <- try(forecast::Arima(ts_real_inf_2, order = c(ar,d,ma)))
srovnavaci_vektor <- c(as.character(ar), as.character(d), as.character(ma), srovnavaci_model$aic, srovnavaci_model$aicc, srovnavaci_model$bic)
originalni_modely <- rbind(originalni_modely, srovnavaci_vektor)
}
informace <- c(as.character(colnames(gt_dss)[i]), p_value, moje_aic, moje_aicc, moje_bic, ar, d, ma, rozeznani_do_tabulky,
srovnavaci_model$aic, srovnavaci_model$aicc, srovnavaci_model$bic)
ssm <- rbind(ssm, informace)
rownames(ssm)[nrow(ssm)] <- paste(as.character(end[1]),"/",as.character(end[2]),"/",as.character(i))
debil <- c(ar, d, ma)
#grafika
# Generate the fitted values
fitted_values <- arima_model$fitted
if (rozeznani_do_tabulky == "regresor"){
barvicka <- "blue"
} else {
barvicka <- "red"
}
# Plot the actual and fitted values
plot(ts_real_inf, main = paste("ARIMA(",ar,",",d,",",ma,") Fitted Values for Inflation"),
xlab = "Time", ylab = b)
lines(fitted_values, col = barvicka)
legend("topleft",
legend = c("Actual", "Fitted",
paste("p-value =", as.character(p_value)),
paste("b =", as.character(b)),
paste("end =", as.character(end)),
paste("AIC =", as.character(moje_aic)),
paste("AICc =", as.character(moje_aicc)),
paste("BIC =", as.character(moje_bic))),
lty = c(1, 1),
col = c("black", barvicka))
} else {
debug_print(colnames(gt_dss)[i])
}
}
}
}
}
}
debug_print(paste("Pocet statisticky signifikantnich promennych je", pocet_ss))
debug_print(ssm)
tabulka_arima_modelu <- rbind(tabulka_arima_modelu, ssm)
}
} else{
#write.csv(tabulka_arima_modelu, "tabulka_arima_modelu.csv", row.names = FALSE)
# Loading the dataframe with rownames
tabulka_arima_modelu <- read.csv("tabulka_arima_modelu.csv", row.names = 1)
#write.csv(gt_dss_a, "gt_dss.csv", row.names = TRUE)
gt_dss <- read.csv("gt_dss.csv", row.names = 1)
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_real_inf_3 <- ts_real_inf[-1]
ts_real_inf_3 <- ts(ts_real_inf_3, start = c(start[1], (start[2] + 1)), frequency = 12)
}
tabulka_arima_modelu
nrow(tabulka_arima_modelu)
tabulka_arima_modelu_zaloha <- tabulka_arima_modelu
tabulka_arima_modelu <- tabulka_arima_modelu_zaloha
print(tabulka_arima_modelu)
for (i in 1:nrow(tabulka_arima_modelu)) {
print(i)
if (tabulka_arima_modelu[i, "lag"] == "lag") {
tabulka_arima_modelu[i,] <- NA
}
}
tabulka_arima_modelu <- tabulka_arima_modelu[complete.cases(tabulka_arima_modelu), ]
tabulka_arima_modelu <- tabulka_arima_modelu %>%
mutate(across(c("AIC", "AICc","BIC", "sAIC", "sAICc","sBIC"), as.numeric))
tabulka_arima_modelu$model <-  tabulka_arima_modelu$AIC + tabulka_arima_modelu$AICc + tabulka_arima_modelu$BIC
tabulka_arima_modelu$benchmark <- tabulka_arima_modelu$sAIC + tabulka_arima_modelu$sAICc + tabulka_arima_modelu$sBIC
tabulka_arima_modelu$vyslednice <- tabulka_arima_modelu$model - tabulka_arima_modelu$benchmark
tabulka_arima_modelu <- tibble::rownames_to_column(tabulka_arima_modelu, var = "row_names")
tabulka_arima_modelu$row_names <- gsub("X", "", tabulka_arima_modelu$row_names)
# Replace "..." with "/" in the row_names column
tabulka_arima_modelu$row_names <- gsub("\\.\\.\\.", "/", tabulka_arima_modelu$row_names)
tabulka_arima_modelu$row_names <- gsub("(/[^/]*)/.*", "\\1", tabulka_arima_modelu$row_names)
# Print the updated dataframe
print(tabulka_arima_modelu)
min_rows <- tabulka_arima_modelu %>%
group_by(row_names) %>%
filter(model == min(model) | benchmark == min(benchmark))
# Print the resulting dataframe
print(min_rows)
end   <- c(2023, 2)
regresor <- ts(data = gt_dss[,"inflace"], start = c(2004, 1), end = end, frequency = 12)
regresor <- regresor / mean(regresor) * mean(ts_real_inf)
ext_regressor <- regresor
#future_values <- opposite_lag(ext_regressor, 1)
posun <- 1
future_values <- stats::lag(ext_regressor, posun)
ext_regressors <- ts(future_values[-(1:posun)], start = c(start[1], (start[2] + 1)), frequency = 12)
arima_model <- try(forecast::Arima(ts_real_inf_3, order = c(1,1,2), xreg = ext_regressors))
arima_model$fitted
# Combine the data into a single data frame
data <- data.frame(ts_real_inf_3, ext_regressors)
# Set up the window sizes for the rolling and expanding windows
rolling_window_size <- 12
expanding_window_size <- nrow(data) - rolling_window_size
# Set up empty vectors to store the forecasts and actuals
rolling_forecasts <- numeric()
rolling_actuals <- numeric()
expanding_forecasts <- numeric()
expanding_actuals <- numeric()
window_size <- rolling_window_size  # Length of the rolling window
n_ahead <- 1
library(forecast)
start_date <- start(ts_real_inf_3)
end_date <- end(ts_real_inf_3)
n_iterations <- length(ts_real_inf_3) - window_size - n_ahead + 1
forecasts_rw <- list()
for (i in 1:n_iterations) {
print(i/n_iterations)
start_window <- start_date + (i - 1) * c(0, 1)
end_window <- start_window + c(0, window_size - 1)
ts_window <- window(ts_real_inf_3, start = start_window, end = end_window)
ext_regressors_window <- window(ext_regressors, start = start_window, end = end_window)
model <- auto.arima(ts_window, xreg = ext_regressors_window)
start_forecast <- end_window + c(0, 1)
end_forecast <- start_forecast + c(0, n_ahead - 1)
ext_regressors_forecast <- window(ext_regressors, start = start_forecast, end = end_forecast)
# Use forecast::forecast instead of the base forecast function
forecast_result <- forecast::forecast(model, h = n_ahead, xreg = ext_regressors_forecast)
forecasts_rw[[i]] <- forecast_result
=======
nazev_grafu_rw <- "Expanding window forecast"
}
print(predpoved)
data_graf <- tabulka_nej_model %>% filter(rw == predpoved)
jmena_sloupcu <- colnames(data_graf)
print(predpoved)
data_graf <- cbind(data_graf %>% filter(ext == "ext"), data_graf %>% filter(ext == "bez"))
colnames(data_graf)[7:12] <- c("v1", "v2","v3", "b_mae", "b_mse", "b_rmse")
meritka <- c("mae","mse", "rmse", "mae - benchmark", "mse - benchmark", "rmse - benchmark")
if(predpoved == "rw"){
osa_x <- "Window length"
} else {
osa_x <- "Starting window length"
}
matplot(data_graf$iterace, data_graf[, meritka], type = "l", lty = line_types, ylim = c(0.3,0.9),
xlab = osa_x, ylab = "Value", col = colores, main = nazev_grafu_rw)
# Add a legend
legend("top", legend = colnames(data_graf[, meritka]), col = colores, lty = line_types, cex = 1)
>>>>>>> 3a14e8c233d4c8a6bbc200d445aabf189ef38d33
}
load("~/Desktop/diploma/env_200.RData")
#sejvuju env
tabulka_nej_model <- as.data.frame(tabulka_nej_model)
tabulka_nej_model_z <- tabulka_nej_model
tabulka_nej_model <- tabulka_nej_model[-1,]
colnames(tabulka_nej_model) <- as.character(uga)
tabulka_nej_model
tabulka_nej_model$iterace <- as.numeric(tabulka_nej_model$iterace)
tabulka_nej_model$mae <- as.numeric(tabulka_nej_model$mae)
tabulka_nej_model$mse <- as.numeric(tabulka_nej_model$mse)
tabulka_nej_model$rmse <- as.numeric(tabulka_nej_model$rmse)
tabulka_nej_model
meritka <- c("mae","mse", "rmse")
par(mfrow = c(2, 2))
for (model in unique(tabulka_nej_model$ext)) {
for (predpoved in unique(tabulka_nej_model$rw)) {
data_graf <- tabulka_nej_model %>% filter(ext == model)
data_graf <- data_graf %>% filter(rw == predpoved)
if (model == "ext") {
nazev_grafu_ext <- "External regressor"
} else {
nazev_grafu_ext <- "Benchmark model"
}
<<<<<<< HEAD
load("C:/Users/jsuch/Desktop/diploma/env1.RData")
=======
if (predpoved == "rw") {
nazev_grafu_rw <- "Rolling window forecast"
} else {
nazev_grafu_rw <- "Expanding window forecast"
}
matplot(data_graf$iterace, data_graf[, meritka], type = "l", ylim = c(0.3,0.9),
xlab = "(Starting) Window length", ylab = "Value", main = c(paste(nazev_grafu_rw, " - ", nazev_grafu_ext)))
legend("topleft", legend = colnames(data_graf[, meritka]), col = 1:3, lty = 1, cex = 0.8)
}
}
line_types <- c(1, 1, 1, 2, 2, 2)
colores <- c("#3399FF", "#33CC66", "#FF0000", "#4DA6FF", "#66CC99", "#FF6666")#3399FF #33CC66
par(mfrow = c(1, 2))
for (predpoved in unique(tabulka_nej_model$rw)) {
if (predpoved == "rw") {
nazev_grafu_rw <- "Rolling window forecast"
} else {
nazev_grafu_rw <- "Expanding window forecast"
}
print(predpoved)
data_graf <- tabulka_nej_model %>% filter(rw == predpoved)
jmena_sloupcu <- colnames(data_graf)
print(predpoved)
data_graf <- cbind(data_graf %>% filter(ext == "ext"), data_graf %>% filter(ext == "bez"))
colnames(data_graf)[7:12] <- c("v1", "v2","v3", "b_mae", "b_mse", "b_rmse")
meritka <- c("mae","mse", "rmse", "mae - benchmark", "mse - benchmark", "rmse - benchmark")
if(predpoved == "rw"){
osa_x <- "Window length"
} else {
osa_x <- "Starting window length"
}
matplot(data_graf$iterace, data_graf[, meritka], type = "l", lty = line_types, ylim = c(0.3,0.9),
xlab = osa_x, ylab = "Value", col = colores, main = nazev_grafu_rw)
# Add a legend
legend("top", legend = colnames(data_graf[, meritka]), col = colores, lty = line_types, cex = 1)
}
for (predpoved in unique(tabulka_nej_model$rw)) {
if (predpoved == "rw") {
nazev_grafu_rw <- "Rolling window forecast"
} else {
nazev_grafu_rw <- "Expanding window forecast"
}
print(predpoved)
data_graf <- tabulka_nej_model %>% filter(rw == predpoved)
jmena_sloupcu <- colnames(data_graf)
print(predpoved)
data_graf <- cbind(data_graf %>% filter(ext == "ext"), data_graf %>% filter(ext == "bez"))
colnames(data_graf)[7:12] <- c("v1", "v2","v3", "b_mae", "b_mse", "b_rmse")
meritka <- c("k","mae","mse", "rmse", "mae - benchmark", "mse - benchmark", "rmse - benchmark")
if(predpoved == "rw"){
osa_x <- "Window length"
} else {
osa_x <- "Starting window length"
}
matplot(data_graf$iterace, data_graf[, meritka], type = "l", lty = line_types, ylim = c(0.3,0.9),
xlab = osa_x, ylab = "Value", col = colores, main = nazev_grafu_rw)
# Add a legend
legend("top", legend = colnames(data_graf[, meritka]), col = colores, lty = line_types, cex = 1)
}
line_types <- c(1, 1, 1, 2, 2, 2)
colores <- c("#3399FF", "#33CC66", "#FF0000", "#4DA6FF", "#66CC99", "#FF6666")#3399FF #33CC66
par(mfrow = c(1, 2))
for (predpoved in unique(tabulka_nej_model$rw)) {
if (predpoved == "rw") {
nazev_grafu_rw <- "Rolling window forecast"
} else {
nazev_grafu_rw <- "Expanding window forecast"
}
print(predpoved)
data_graf <- tabulka_nej_model %>% filter(rw == predpoved)
jmena_sloupcu <- colnames(data_graf)
print(predpoved)
data_graf <- cbind(data_graf %>% filter(ext == "ext"), data_graf %>% filter(ext == "bez"))
colnames(data_graf)[7:12] <- c("v1", "v2","v3", "b_mae", "b_mse", "b_rmse")
meritka <- c("k","mae","mse", "rmse", "mae - benchmark", "mse - benchmark", "rmse - benchmark")
if(predpoved == "rw"){
osa_x <- "Window length"
} else {
osa_x <- "Starting window length"
}
matplot(data_graf$iterace, data_graf[, meritka], type = "l", lty = line_types, ylim = c(0.3,0.9),
xlab = osa_x, ylab = "Value", col = colores, main = nazev_grafu_rw)
# Add a legend
legend("top", legend = colnames(data_graf[, meritka]), col = colores, lty = line_types, cex = 1)
}
line_types <- c(1, 1, 1, 2, 2, 2)
colores <- c("#3399FF", "#33CC66", "#FF0000", "#4DA6FF", "#66CC99", "#FF6666")#3399FF #33CC66
par(mfrow = c(1, 2))
for (predpoved in unique(tabulka_nej_model$rw)) {
if (predpoved == "rw") {
nazev_grafu_rw <- "Rolling window forecast"
} else {
nazev_grafu_rw <- "Expanding window forecast"
}
print(predpoved)
data_graf <- tabulka_nej_model %>% filter(rw == predpoved)
jmena_sloupcu <- colnames(data_graf)
print(predpoved)
data_graf <- cbind(data_graf %>% filter(ext == "ext"), data_graf %>% filter(ext == "bez"))
colnames(data_graf)[7:12] <- c("v1", "v2","v3", "b_mae", "b_mse", "b_rmse")
meritka <- c("iterace","mae","mse", "rmse", "mae - benchmark", "mse - benchmark", "rmse - benchmark")
if(predpoved == "rw"){
osa_x <- "Window length"
} else {
osa_x <- "Starting window length"
}
matplot(data_graf$iterace, data_graf[, meritka], type = "l", lty = line_types, ylim = c(0.3,0.9),
xlab = osa_x, ylab = "Value", col = colores, main = nazev_grafu_rw)
# Add a legend
legend("top", legend = colnames(data_graf[, meritka]), col = colores, lty = line_types, cex = 1)
}
for (predpoved in unique(tabulka_nej_model$rw)) {
if (predpoved == "rw") {
nazev_grafu_rw <- "Rolling window forecast"
} else {
nazev_grafu_rw <- "Expanding window forecast"
}
data_graf <- tabulka_nej_model %>% filter(rw == predpoved)
jmena_sloupcu <- colnames(data_graf)
print(predpoved)
data_graf <- cbind(data_graf %>% filter(ext == "ext"), data_graf %>% filter(ext == "bez"))
print(data_graf)
colnames(data_graf)[7:12] <- c("v1", "v2","v3", "b_mae", "b_mse", "b_rmse")
meritka <- c("iterace","mae","mse", "rmse", "mae - benchmark", "mse - benchmark", "rmse - benchmark")
if(predpoved == "rw"){
osa_x <- "Window length"
} else {
osa_x <- "Starting window length"
}
matplot(data_graf$iterace, data_graf[, meritka], type = "l", lty = line_types, ylim = c(0.3,0.9),
xlab = osa_x, ylab = "Value", col = colores, main = nazev_grafu_rw)
# Add a legend
legend("top", legend = colnames(data_graf[, meritka]), col = colores, lty = line_types, cex = 1)
}
for (predpoved in unique(tabulka_nej_model$rw)) {
if (predpoved == "rw") {
nazev_grafu_rw <- "Rolling window forecast"
} else {
nazev_grafu_rw <- "Expanding window forecast"
}
data_graf <- tabulka_nej_model %>% filter(rw == predpoved)
jmena_sloupcu <- colnames(data_graf)
print(predpoved)
data_graf <- cbind(data_graf %>% filter(ext == "ext"), data_graf %>% filter(ext == "bez"))
print(data_graf)
colnames(data_graf)[7:12] <- c("v1", "v2","v3", "mae - benchmark", "mse - benchmark", "rmse - benchmark")
meritka <- c("iterace","mae","mse", "rmse", "mae - benchmark", "mse - benchmark", "rmse - benchmark")
if(predpoved == "rw"){
osa_x <- "Window length"
} else {
osa_x <- "Starting window length"
}
matplot(data_graf$iterace, data_graf[, meritka], type = "l", lty = line_types, ylim = c(0.3,0.9),
xlab = osa_x, ylab = "Value", col = colores, main = nazev_grafu_rw)
# Add a legend
legend("top", legend = colnames(data_graf[, meritka]), col = colores, lty = line_types, cex = 1)
}
for (predpoved in unique(tabulka_nej_model$rw)) {
if (predpoved == "rw") {
nazev_grafu_rw <- "Rolling window forecast"
} else {
nazev_grafu_rw <- "Expanding window forecast"
}
data_graf <- tabulka_nej_model %>% filter(rw == predpoved)
jmena_sloupcu <- colnames(data_graf)
print(predpoved)
data_graf <- cbind(data_graf %>% filter(ext == "ext"), data_graf %>% filter(ext == "bez"))
print(data_graf)
colnames(data_graf)[7:12] <- c("v1", "v2","v3", "mae - benchmark", "mse - benchmark", "rmse - benchmark")
meritka <- c("mae","mse", "rmse", "mae - benchmark", "mse - benchmark", "rmse - benchmark")
if(predpoved == "rw"){
osa_x <- "Window length"
} else {
osa_x <- "Starting window length"
}
matplot(data_graf$iterace, data_graf[, meritka], type = "l", lty = line_types, ylim = c(0.3,0.9),
xlab = osa_x, ylab = "Value", col = colores, main = nazev_grafu_rw)
# Add a legend
legend("top", legend = colnames(data_graf[, meritka]), col = colores, lty = line_types, cex = 1)
}
line_types <- c(1, 1, 1, 2, 2, 2)
colores <- c("#3399FF", "#33CC66", "#FF0000", "#4DA6FF", "#66CC99", "#FF6666")#3399FF #33CC66
par(mfrow = c(1, 2))
for (predpoved in unique(tabulka_nej_model$rw)) {
if (predpoved == "rw") {
nazev_grafu_rw <- "Rolling window forecast"
} else {
nazev_grafu_rw <- "Expanding window forecast"
}
data_graf <- tabulka_nej_model %>% filter(rw == predpoved)
jmena_sloupcu <- colnames(data_graf)
print(predpoved)
data_graf <- cbind(data_graf %>% filter(ext == "ext"), data_graf %>% filter(ext == "bez"))
print(data_graf)
colnames(data_graf)[7:12] <- c("v1", "v2","v3", "mae - benchmark", "mse - benchmark", "rmse - benchmark")
meritka <- c("mae","mse", "rmse", "mae - benchmark", "mse - benchmark", "rmse - benchmark")
if(predpoved == "rw"){
osa_x <- "Window length"
} else {
osa_x <- "Starting window length"
}
matplot(data_graf$iterace, data_graf[, meritka], type = "l", lty = line_types, ylim = c(0.3,0.9),
xlab = osa_x, ylab = "Value", col = colores, main = nazev_grafu_rw)
# Add a legend
legend("top", legend = colnames(data_graf[, meritka]), col = colores, lty = line_types, cex = 1)
}
>>>>>>> 3a14e8c233d4c8a6bbc200d445aabf189ef38d33
library(readxl)
library(data.table)
library(dplyr)
library(forecast)
library(aTSA)
library(tseries)
library(stringr)
library(lmtest)
library(rugarch)
library(xts)
library(stats)
library(crayon)
library(vars)
library(tibble)
library(xtable)
library(ggplot2)
library(tidyr)
library(tidyverse)
colores <- c("#3399FF", "#33CC66", "#FF0000", "#4DA6FF", "#66CC99", "#FF6666")#3399FF #33CC66
par(mfrow = c(1, 2))
for (predpoved in unique(tabulka_nej_model$rw)) {
if (predpoved == "rw") {
nazev_grafu_rw <- "Rolling window forecast"
} else {
nazev_grafu_rw <- "Expanding window forecast"
}
data_graf <- tabulka_nej_model %>% filter(rw == predpoved)
jmena_sloupcu <- colnames(data_graf)
print(predpoved)
data_graf <- cbind(data_graf %>% filter(ext == "ext"), data_graf %>% filter(ext == "bez"))
print(data_graf)
colnames(data_graf)[7:12] <- c("v1", "v2","v3", "mae - benchmark", "mse - benchmark", "rmse - benchmark")
meritka <- c("mae","mse", "rmse", "mae - benchmark", "mse - benchmark", "rmse - benchmark")
if(predpoved == "rw"){
osa_x <- "Window length"
} else {
osa_x <- "Starting window length"
}
matplot(data_graf$iterace, data_graf[, meritka], type = "l", lty = line_types, ylim = c(0.3,0.9),
xlab = osa_x, ylab = "Value", col = colores, main = nazev_grafu_rw)
# Add a legend
legend("top", legend = colnames(data_graf[, meritka]), col = colores, lty = line_types, cex = 1)
}
for (predpoved in unique(tabulka_nej_model$rw)) {
if (predpoved == "rw") {
nazev_grafu_rw <- "Rolling window forecast"
} else {
nazev_grafu_rw <- "Expanding window forecast"
}
data_graf <- tabulka_nej_model %>% filter(rw == predpoved)
jmena_sloupcu <- colnames(data_graf)
data_graf <- cbind(data_graf %>% filter(ext == "ext"), data_graf %>% filter(ext == "bez"))
testy <- data_graf[,c(1,4,5,6,10,11,12)]
soucet_m <- testy$mae + testy$mse + testy$rmse
soucet_b <- testy$mae.1 + testy$mse.1 + testy$rmse.1
my_vector <- soucet_m
smallest_values <- sort(my_vector)[1:3]
# Get the indices of the smallest values
indices <- which(my_vector %in% smallest_values)
print(predpoved)
print("3 nejlepsi settingy okna")
print(testy[indices,"iterace"])
print("jak casto nizsi?")
print(sum(soucet_m < soucet_b))
print("parove modely")
alternativa <- c("less")
t_mae <- t.test(testy$mae ,testy$mae.1 , alternative = alternativa, paired = TRUE)
print(t_mae)
t_mse <- t.test(testy$mse ,testy$mse.1 , alternative = alternativa, paired = TRUE)
print(t_mse)
t_rmse <- t.test(testy$rmse ,testy$rmse.1 , alternative = alternativa, paired = TRUE)
print(t_rmse)
print("NEparove modely")
t_mae <- t.test(testy$mae ,testy$mae.1 , alternative = alternativa)
print(t_mae)
t_mse <- t.test(testy$mse ,testy$mse.1 , alternative = alternativa)
print(t_mse)
t_rmse <- t.test(testy$rmse ,testy$rmse.1 , alternative = alternativa)
print(t_rmse)
}
tabulka_nej_model_testy <- cbind(tabulka_nej_model %>% filter(rw == "rw"),tabulka_nej_model %>% filter(rw == "ew"))
tabulka_nej_model_testy <- tabulka_nej_model_testy[, c(4,5,6,10,11,12)]
t.test(tabulka_nej_model_testy$mae ,tabulka_nej_model_testy$mae.1 , alternative = alternativa)
View(tabulka_arima_modelu)
par(mfrow = c(1, 1))
for (predpoved in unique(tabulka_nej_model$rw)) {
if (predpoved == "rw") {
nazev_grafu_rw <- "Rolling window forecast"
} else {
nazev_grafu_rw <- "Expanding window forecast"
}
data_graf <- tabulka_nej_model %>% filter(rw == predpoved)
jmena_sloupcu <- colnames(data_graf)
print(predpoved)
data_graf <- cbind(data_graf %>% filter(ext == "ext"), data_graf %>% filter(ext == "bez"))
print(data_graf)
colnames(data_graf)[7:12] <- c("v1", "v2","v3", "mae - benchmark", "mse - benchmark", "rmse - benchmark")
meritka <- c("mae","mse", "rmse", "mae - benchmark", "mse - benchmark", "rmse - benchmark")
if(predpoved == "rw"){
osa_x <- "Window length"
} else {
osa_x <- "Starting window length"
}
matplot(data_graf$iterace, data_graf[, meritka], type = "l", lty = line_types, ylim = c(0.3,0.9),
xlab = osa_x, ylab = "Value", col = colores, main = nazev_grafu_rw)
# Add a legend
legend("top", legend = colnames(data_graf[, meritka]), col = colores, lty = line_types, cex = 1)
}
for (predpoved in unique(tabulka_nej_model$rw)) {
if (predpoved == "rw") {
nazev_grafu_rw <- "Rolling window forecast"
} else {
nazev_grafu_rw <- "Expanding window forecast"
}
data_graf <- tabulka_nej_model %>% filter(rw == predpoved)
jmena_sloupcu <- colnames(data_graf)
data_graf <- cbind(data_graf %>% filter(ext == "ext"), data_graf %>% filter(ext == "bez"))
testy <- data_graf[,c(1,4,5,6,10,11,12)]
soucet_m <- testy$mae + testy$mse + testy$rmse
soucet_b <- testy$mae.1 + testy$mse.1 + testy$rmse.1
my_vector <- soucet_m
smallest_values <- sort(my_vector)[1:3]
# Get the indices of the smallest values
indices <- which(my_vector %in% smallest_values)
print(predpoved)
print("3 nejlepsi settingy okna")
print(testy[indices,"iterace"])
print("jak casto nizsi?")
print(sum(soucet_m < soucet_b))
print("parove modely")
alternativa <- c("less")
t_mae <- t.test(testy$mae ,testy$mae.1 , alternative = alternativa, paired = TRUE)
print(t_mae)
t_mse <- t.test(testy$mse ,testy$mse.1 , alternative = alternativa, paired = TRUE)
print(t_mse)
t_rmse <- t.test(testy$rmse ,testy$rmse.1 , alternative = alternativa, paired = TRUE)
print(t_rmse)
print("NEparove modely")
t_mae <- t.test(testy$mae ,testy$mae.1 , alternative = alternativa)
print(t_mae)
t_mse <- t.test(testy$mse ,testy$mse.1 , alternative = alternativa)
print(t_mse)
t_rmse <- t.test(testy$rmse ,testy$rmse.1 , alternative = alternativa)
print(t_rmse)
}
tabulka_nej_model_testy <- cbind(tabulka_nej_model %>% filter(rw == "rw"),tabulka_nej_model %>% filter(rw == "ew"))
tabulka_nej_model_testy <- tabulka_nej_model_testy[, c(4,5,6,10,11,12)]
t.test(tabulka_nej_model_testy$mae ,tabulka_nej_model_testy$mae.1 , alternative = alternativa)
tabulka_arima_modelu %>% group_by(row_names) %>% count(promenna)
print(pca_2022)
pc_1 <- pca_2022[[2]]
pc_1 <- pc_1[,"PC1"]
pc_1 <- as.data.frame(pc_1 %>% round(2))
pc_1
print(xtable(pc_1, caption = "Degree of correlation between First principal component and other search queries",
digits = 2, type = "latex"), file = "tabulka_pc1.tex")
print(xtable(pc_1, caption = "Degree of correlation between First principal component and other search queries",
digits = 2, type = "latex"), file = "tabulka_pc1.tex")
pc_1_modely <- tabulka_arima_modelu %>% filter(promenna == "PC1")
sorted_df <- pc_1_modely[order(pc_1_modely$model), ]
pc_1_modely <- sorted_df[1:3,]
pc_1_modely$coef <- as.numeric(pc_1_modely$coef)
pc_1_modely_rounded <- data.frame(sapply(pc_1_modely, function(x) {
if (is.numeric(x)) {
return(round(x, 4))
} else {
return(x)
}
}))
pc_1_modely
print(xtable(pc_1_modely, caption = "Modely",
digits = 2, type = "latex"), file = "tabulka_pc1_modely.tex")
pc_1_modely
pc_1_modely <- pc_1_modely[,c(7,8,9,10,3,11,4,5,6,12,13,14)]
print(xtable(pc_1_modely, caption = "Modely",
digits = 2, type = "latex"), file = "tabulka_pc1_modely.tex")
pc_1_modely <- pc_1_modely[,c(7,8,9,10,3,11,4,5,6,12,13,14)]
print(xtable(pc_1_modely, caption = "Modely",
digits = 2, type = "latex"), file = "tabulka_pc1_modely.tex")
pc_1_modely
pc_1_modely <- pc_1_modely[,c(7,8,9,10,3,11,4,5,6,12,13,14)]
print(xtable(pc_1_modely, caption = "Modely",
digits = 2, type = "latex"), file = "tabulka_pc1_modely.tex")
pc_1_modely <- tabulka_arima_modelu %>% filter(promenna == "cena.nafty")
sorted_df <- pc_1_modely[order(pc_1_modely$benchmark), ]
pc_1_modely <- sorted_df[1:3,]
pc_1_modely$coef <- as.numeric(pc_1_modely$coef)
pc_1_modely_rounded <- data.frame(sapply(pc_1_modely, function(x) {
if (is.numeric(x)) {
return(round(x, 4))
} else {
return(x)
}
}))
pc_1_modely
pc_1_modely <- tabulka_arima_modelu %>% filter(row_names == "2022/2") %>% filter(promenna == "cena.nemovitosti")
sorted_df <- pc_1_modely[order(pc_1_modely$benchmark), ]
pc_1_modely <- sorted_df[1:3,]
pc_1_modely$coef <- as.numeric(pc_1_modely$coef)
pc_1_modely_rounded <- data.frame(sapply(pc_1_modely, function(x) {
if (is.numeric(x)) {
return(round(x, 4))
} else {
return(x)
}
}))
pc_1_modely
pc_1_modely <- tabulka_arima_modelu %>% filter(row_names == "2022/2") %>% filter(promenna == "cena.ropy")
sorted_df <- pc_1_modely[order(pc_1_modely$benchmark), ]
pc_1_modely <- sorted_df[1:3,]
pc_1_modely$coef <- as.numeric(pc_1_modely$coef)
pc_1_modely_rounded <- data.frame(sapply(pc_1_modely, function(x) {
if (is.numeric(x)) {
return(round(x, 4))
} else {
return(x)
}
}))
pc_1_modely
pc_1_modely <- tabulka_arima_modelu %>% filter(row_names == "2022/2") %>% filter(promenna == "inflace")
sorted_df <- pc_1_modely[order(pc_1_modely$benchmark), ]
pc_1_modely <- sorted_df[1:3,]
pc_1_modely$coef <- as.numeric(pc_1_modely$coef)
pc_1_modely_rounded <- data.frame(sapply(pc_1_modely, function(x) {
if (is.numeric(x)) {
return(round(x, 4))
} else {
return(x)
}
}))
pc_1_modely
pc_1_modely <- tabulka_arima_modelu %>% filter(row_names == "2023/2") %>% filter(promenna == "inflace")
sorted_df <- pc_1_modely[order(pc_1_modely$benchmark), ]
pc_1_modely <- sorted_df[1:3,]
pc_1_modely$coef <- as.numeric(pc_1_modely$coef)
pc_1_modely_rounded <- data.frame(sapply(pc_1_modely, function(x) {
if (is.numeric(x)) {
return(round(x, 4))
} else {
return(x)
}
<<<<<<< HEAD
}
}
}
}
debug_print(paste("Pocet statisticky signifikantnich promennych je", pocet_ss))
debug_print(ssm)
tabulka_arima_modelu <- rbind(tabulka_arima_modelu, ssm)
}
} else{
#write.csv(tabulka_arima_modelu, "tabulka_arima_modelu.csv", row.names = FALSE)
# Loading the dataframe with rownames
tabulka_arima_modelu <- read.csv("tabulka_arima_modelu.csv", row.names = 1)
#write.csv(gt_dss_a, "gt_dss.csv", row.names = TRUE)
gt_dss <- read.csv("gt_dss.csv", row.names = 1)
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_real_inf_3 <- ts_real_inf[-1]
ts_real_inf_3 <- ts(ts_real_inf_3, start = c(start[1], (start[2] + 1)), frequency = 12)
}
tabulka_arima_modelu
=======
}))
pc_1_modely
5 <8
library(readxl)
library(data.table)
library(dplyr)
library(forecast)
library(aTSA)
library(tseries)
library(stringr)
library(lmtest)
library(rugarch)
library(xts)
library(stats)
library(crayon)
library(vars)
library(tibble)
library(xtable)
library(ggplot2)
library(tidyr)
library(tidyverse)
print(xtable(min_rows, caption = "Best models",
digits = 2, type = "latex"), file = "min_rows.tex")
>>>>>>> 3a14e8c233d4c8a6bbc200d445aabf189ef38d33
