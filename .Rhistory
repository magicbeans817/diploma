}
}
######################################################################################################
# 1)  understanding the data about inflation, transforming them
data <- list()
pocet_sheetu <- 4
for (i in 1:pocet_sheetu) {
data[[i]] <- read_excel("inflace.xlsx", sheet = i)
}
data[[2]] %>% head
for (i in 1:pocet_sheetu) {
x <- data[[i]]
y <- data.frame(x[,-1], row.names = x$Year)
data[[i]] <- y
}
for (i in 1:pocet_sheetu) {
debug_print(i)
debug_print(data[[i]] %>% head)
debug_print(data[[i]] %>% dim)
}
data[[4]] <- data[[4]][,-13] # remove aggregate column nebo co to je
inf_cpm     <- data[[3]] %>% t %>% unlist %>% as.vector
inf_cpm     <- ts(inf_cpm, frequency = 12, start = c(1997, 1))  # inf, corresponding preceeding month
inf_cpm
plot(inf_cpm)
######################################################################################################
# 2) Google trends data
gt <- read.csv("search_trends.csv", row.names = 1)
gt %>% head
gt%>% dim
gt <- gt[ , !(names(gt) %in% c("cena.bydleni", "nakup.zlata"))]
gt_up <- read.csv("search_trends_up.csv", row.names = 1)
gt <- cbind(gt, gt_up[,14:ncol(gt_up)])
rownm <- as.Date(rownames(gt), format = "%Y-%d-%m")
rownm <- format(rownm, "%Y-%m-%d")
start <- rownames(gt)[1]
rok   <- as.numeric(substr(start, 1, 4))
mesic <- as.numeric(substr(start, 6, 7))
start <- c(rok, mesic)
jmena_sloupecku <- c("promenna", "p-value","posun", "AIC","AICc","BIC", "AR", "I", "MA", "coef","lag", "b_AIC", "b_AICc","b_BIC",
"mae", "mse", "rmse", "b_mae", "b_mse", "b_rmse")
pocet_sloupecku <- length(jmena_sloupecku)
tabulka_arima_modelu <- data.frame(matrix(ncol = pocet_sloupecku, nrow = 0))
colnames(tabulka_arima_modelu) <- jmena_sloupecku
my_matrix <- matrix(c(2020, 2, 2022, 2, 2023, 2), nrow = 3, ncol = 2, byrow = TRUE)
my_matrix_n <- nrow(my_matrix)
# Create an empty list to store the row vectors
row_vectors <- vector("list", length = my_matrix_n)
originalni_modely <- matrix(c(1:6), nrow = 1)
colnames(originalni_modely) <- c("dAR","dI","dMA","dAIC","dAICc","dBIC")
testy <- data.frame(time_interval = character(),
column_name = character(),
adf_p_value = numeric(),
ljung_box_p_value = numeric(),
stringsAsFactors = FALSE)
granger <- data.frame(time_interval = character(),
column_name = character(),
n_lags = numeric(),
granger_p_value = numeric())
bum <- 0
if (new_data == 0){
for (rocnik in 1:my_matrix_n) {
row_vectors[[rocnik]] <- my_matrix[rocnik, ]
end <- row_vectors[[rocnik]]
debug_print(end)
#end   <- c(2022, 2)
if(rocnik == 1){
gt_f <- gt[1:(nrow(gt)-36),]
}else if(rocnik == 2){
gt_f <- gt[1:(nrow(gt)-12),]
}else if(rocnik == 3){
gt_f <- gt
}
debug_print("tvoje mama")
# Convert all columns to numeric
gt_numeric <- data.frame(lapply(gt_f, as.numeric))
# Remove seasonality from the data
gt_deseasonalized <- data.frame(lapply(gt_numeric, function(x) {
stl_model <- stl(ts(x, frequency = 12), s.window = "periodic")
deseasonalized <- stl_model$time.series[, "remainder"]
return(deseasonalized)
}))
debug_print("moje mama")
# Print the deseasonalized data
debug_print("markova mama")
if(rocnik == 1){
row.names(gt_deseasonalized) <- rownm[1:(length(rownm)-36)]
}else if(rocnik == 2){
row.names(gt_deseasonalized) <- rownm[1:(length(rownm)-12)]
}else if(rocnik == 3){
row.names(gt_deseasonalized) <- rownm
}
debug_print(gt_deseasonalized)
for (i in 1:ncol(gt_deseasonalized)) {
plot(gt_deseasonalized[,i], ylab = colnames(gt_deseasonalized)[i])
tseries::adf.test(gt_deseasonalized[,i])
}
head(gt_deseasonalized)
tail(gt_deseasonalized)
gt_dss <- gt_deseasonalized
gt_dss <- as.matrix(gt_dss)
######################################################################################################
# Seasonality u inflace
ts_data <- na.omit(inf_cpm)
ts_decomposed <- stl(ts_data, s.window = "periodic")
# Subtract the seasonal component from the original time series to create the deseasonalized time series
ts_deseasonalized <- ts_data - ts_decomposed$time.series[, "seasonal"]
# Plot the original time series and the deseasonalized time series
#par(mfrow = c(2, 1))
plot(ts_data, main = "Original Time Series")
plot(ts_deseasonalized, main = "Deseasonalized Time Series")
######################################################################################################
# Subsetting, tests and adjustment of GT
s_inf_cpm_s <- window(ts_deseasonalized, frequency = 12, start = c(rok, mesic), end = end)
for (i in 1:ncol(gt_dss)) {
# ADF Test
adf_test <- adf.test(gt_dss[,i])
# Ljung-Box Test
lb_test <- Box.test(gt_dss[,i], lag = 12, type = "Ljung-Box")
# Append results to testy dataframe
testy <- rbind(testy, data.frame(time_interval = rocnik,
column_name = as.character(colnames(gt_dss)[i]),
adf_p_value = adf_test$p.value,
ljung_box_p_value = lb_test$p.value))
}
######################################################################################################
# PCA
pca <- prcomp(gt_dss, scale. = TRUE)
print(pca)
if (rocnik == 2){
pca_2022 <- pca
}
# Print PCA results (eigenvalues, eigenvectors, and standard deviations)
debug_print(pca)
index <- 0
for (i in 1:length(pca$sdev)) {
debug_print(i)
if (pca$sdev[i] > 1){
index <- index + 1
}
}
gt_dss <- cbind(gt_dss, pca$x[,c(1:index)])
# granger
for (i in 1:ncol(gt_dss)) {
x <- ts(gt_dss[, i], start = start, frequency = 12)
for (j in 1:12) {
y <- lmtest::grangertest(s_inf_cpm_s, x, order = j)
debug_print(y)
debug_print(colnames(gt_dss)[i])
granger <- rbind(granger, data.frame(time_interval = rocnik,
column_name = as.character(colnames(gt_dss)[i]),
n_lags = j,
granger_p_value = y$`Pr(>F)`))
}
}
######################################################################################################
# Arima
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ar <- 1
d  <- 1
ma <- 1 #jednicka idealni
# Srovnani s arimou bez external regresoru
arima_model <- forecast::Arima(ts_real_inf, order = c(ar,d,ma))
ssm <- matrix(c("originalni model", NA, arima_model$aic, arima_model$aicc, arima_model$bic, ar, d, ma, 0, "Vojta", "je", "debil",
"mae", "mse", "rmse", "b_mae", "b_mse", "b_rmse"), nrow = 1, ncol = length(jmena_sloupecku))
colnames(ssm) <- jmena_sloupecku
pocet_ss <- 0
opposite_lag <- function(x, k) {
c(tail(x, -k), rep(NA, k))
}
# Remove the last observation from the data as well
ts_real_inf_2 <- ts_real_inf[-length(ts_real_inf)]
ts_real_inf_2 <- ts(ts_real_inf_2, start = start, frequency = 12)
ts_real_inf_3 <- ts_real_inf[-1]
ts_real_inf_3 <- ts(ts_real_inf_3, start = c(start[1], (start[2] + 1)), frequency = 12)
# Plot ACF
acf(ts_real_inf, main = paste("ACF - Inflation, (2004 -", end[1],")"))
# Plot PACF
pacf(ts_real_inf, main = paste("PACF - Inflation, (2004 -", end[1],")"))
cifry <- 9
######################################################################################################
for (i in 1:ncol(gt_dss)) {
print(colnames(gt_dss)[i])
for (d in 0:1) {
for (ma in 1:3) {
for (ar in 0:3) {
debug_print(i)
regresor <- ts(data = gt_dss[,i], start = c(2004, 1), end = end, frequency = 12)
regresor <- regresor / regresor[1] * ts_real_inf[1]
#print(regresor)
for (posun in 0:12) {
ext_regressor <- as.vector(regresor)
ext_regressor <- lag(ext_regressor, posun)
ext_regressor <- ts(ext_regressor, start = c(start[1], (start[2])), frequency = 12)
arima_model <- try(forecast::Arima(ts_real_inf, order = c(ar,d,ma), xreg = ext_regressor))
# Pro pripad multiple regression
# Combine the original external regressor and its future values into a matrix
#ext_regressors <- cbind(ext_regressor, future_values)
#colnames(ext_regressors) <- c("ext_regressor", "future_values")
#
# Check if there was an error
if (!inherits(arima_model, "try-error")) {
# Store the ARIMA model in the list if no error occurred
} else {
# Print a message and continue to the next iteration if an error occurred
cat("Error encountered for ARIMA(", colnames(gt_dss)[i]) # . Skipping this model.\n")
next  # Continue to the next iteration
}
se_coef <- sqrt(diag(arima_model$var.coef))["xreg"]
co <- arima_model$coef["xreg"]
ss <- co/ se_coef
if (is.nan(se_coef) == TRUE | is.nan(co) == TRUE) {
p_value <- 1
} else {
p_value <- round(2 * (1 - pnorm(abs(ss))), digits = 4)
}
if (p_value < 0.1 ) {
debug_print("p_value")
debug_print(p_value)
pocet_ss <- pocet_ss + 1
debug_print(i)
b <- colnames(gt_dss)[i]
cat(red(b))
moje_aic <- round(arima_model$aic, digits = cifry)
moje_aicc <- round(arima_model$aicc, digits = cifry)
moje_bic <- round(arima_model$bic, digits = cifry)
# mae, mse, rmse
fitted_values <- fitted(arima_model)
residuals <- ts_real_inf - fitted_values
residuals <- na.omit(residuals)
# Mean Absolute Error (MAE)
mae <- mean(abs(residuals))
mae <- round(mae, digits = cifry)
# Mean Squared Error (MSE)
mse <- mean(residuals^2)
mse <- round(mse, digits = cifry)
# Root Mean Squared Error (RMSE)
rmse <- sqrt(mse)
rmse <- round(rmse, digits = cifry)
novy_regresor <- ts_real_inf[1:(length(ts_real_inf)-posun)]
srovnavaci_model <- try(forecast::Arima(novy_regresor, order = c(ar,d,ma)))
srovnavaci_vektor <- c(as.character(ar), as.character(d), as.character(ma), srovnavaci_model$aic, srovnavaci_model$aicc, srovnavaci_model$bic)
originalni_modely <- rbind(originalni_modely,srovnavaci_vektor)
# benchmark mae, mse, rmse
fitted_values <- fitted(srovnavaci_model)
residuals <- novy_regresor - fitted_values
# Mean Absolute Error (MAE)
b_mae <- mean(abs(residuals))
b_mae <- round(b_mae, digits = cifry)
# Mean Squared Error (MSE)
b_mse <- mean(residuals^2)
b_mse <- round(b_mse, digits = cifry)
# Root Mean Squared Error (RMSE)
b_rmse <- sqrt(b_mse)
b_rmse <- round(b_rmse, digits = cifry)
informace <- c(as.character(colnames(gt_dss)[i]), p_value, posun, moje_aic, moje_aicc, moje_bic, ar, d, ma, co, NA,
srovnavaci_model$aic, srovnavaci_model$aicc, srovnavaci_model$bic, mae, mse, rmse, b_mae, b_mse, b_rmse)
ssm <- rbind(ssm, informace)
rownames(ssm)[nrow(ssm)] <- paste(as.character(end[1]),"/",as.character(end[2]),"/",as.character(i))
debil <- c(ar, d, ma)
#grafika
# Generate the fitted values
fitted_values <- arima_model$fitted
if (DEBUG == TRUE) {
barvicka <- "blue"
# Plot the actual and fitted values
plot(ts_real_inf, main = paste("ARIMA(",ar,",",d,",",ma,") Fitted Values for Inflation"),
xlab = "Time", ylab = b)
lines(fitted_values, col = barvicka)
legend("topleft",
legend = c("Actual", "Fitted",
paste("p-value =", as.character(p_value)),
paste("b =", as.character(b)),
paste("end =", as.character(end)),
paste("AIC =", as.character(moje_aic)),
paste("AICc =", as.character(moje_aicc)),
paste("BIC =", as.character(moje_bic))),
lty = c(1, 1),
col = c("black", barvicka))
}
} else {
debug_print(colnames(gt_dss)[i])
}
}
}
}
}
}
print(paste("Pocet statisticky signifikantnich promennych je", pocet_ss))
print(paste("Tabulka arima modelu ma sloupecku:", ncol(tabulka_arima_modelu)))
print(paste("SSM ma sloupecku:", ncol(ssm)))
tabulka_arima_modelu <- rbind(tabulka_arima_modelu, ssm)
}
} else{
#write.csv(tabulka_arima_modelu, "tabulka_arima_modelu.csv", row.names = FALSE)
# Loading the dataframe with rownames
tabulka_arima_modelu <- read.csv("tabulka_arima_modelu.csv", row.names = 1)
write.csv(gt_dss_a, "gt_dss.csv", row.names = TRUE)
gt_dss <- read.csv("gt_dss.csv", row.names = 1)
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_real_inf_3 <- ts_real_inf[-1]
ts_real_inf_3 <- ts(ts_real_inf_3, start = c(start[1], (start[2] + 1)), frequency = 12)
}
granger <- na.omit(granger)
granger_sub <- granger %>% filter(granger_p_value < 0.05)
granger_sub %>% count(column_name)
tabulka_arima_modelu
nrow(tabulka_arima_modelu)
tabulka_arima_modelu_zaloha <- tabulka_arima_modelu
tabulka_arima_modelu <- tabulka_arima_modelu_zaloha
print(tabulka_arima_modelu)
for (i in 1:nrow(tabulka_arima_modelu)) {
if (tabulka_arima_modelu[i, "promenna"] == "originalni model") {
tabulka_arima_modelu[i,] <- NA
}
}
tabulka_arima_modelu$lag <- NULL
tabulka_arima_modelu <- tabulka_arima_modelu[complete.cases(tabulka_arima_modelu), ]
tabulka_arima_modelu <- tabulka_arima_modelu %>%
mutate(across(c("AIC", "AICc","BIC", "b_AIC", "b_AICc","b_BIC"), as.numeric))
tabulka_arima_modelu$sc <-  tabulka_arima_modelu$AIC + tabulka_arima_modelu$AICc + tabulka_arima_modelu$BIC
tabulka_arima_modelu$sc_b <- tabulka_arima_modelu$b_AIC + tabulka_arima_modelu$b_AICc + tabulka_arima_modelu$b_BIC
tabulka_arima_modelu$vyslednice <- tabulka_arima_modelu$sc - tabulka_arima_modelu$sc_b
tabulka_arima_modelu$model_bez_bic <-  tabulka_arima_modelu$AIC + tabulka_arima_modelu$AICc
tabulka_arima_modelu$benchmark_bez_bic <- tabulka_arima_modelu$b_AIC + tabulka_arima_modelu$b_AICc
tabulka_arima_modelu$vyslednice_bez_bic <- tabulka_arima_modelu$model_bez_bic - tabulka_arima_modelu$benchmark_bez_bic
#View(tabulka_arima_modelu)
tabulka_arima_modelu <- tibble::rownames_to_column(tabulka_arima_modelu, var = "row_names")
tabulka_arima_modelu$row_names <- gsub("X", "", tabulka_arima_modelu$row_names)
# Replace "..." with "/" in the row_names column
tabulka_arima_modelu$row_names <- gsub("\\.\\.\\.", "/", tabulka_arima_modelu$row_names)
tabulka_arima_modelu$row_names <- gsub("(/[^/]*)/.*", "\\1", tabulka_arima_modelu$row_names)
pomocna_tabulka <- tabulka_arima_modelu[, c("row_names", "posun", "AR", "I", "MA")]
pomocna_tabulka <- unique(pomocna_tabulka)
View(pomocna_tabulka)
pomocna_tabulka$pom_AIC <- 0
pomocna_tabulka$pom_AICc <- 0
pomocna_tabulka$pom_BIC <- 0
pomocna_tabulka$pom_mae <- 0
pomocna_tabulka$pom_mse <- 0
pomocna_tabulka$pom_rmse <- 0
cifra <- 9
View(pomocna_tabulka)
for (i in 1:nrow(pomocna_tabulka)) {
posun <- pomocna_tabulka[i, "posun"]
data <- ts_real_inf[1:(length(tabulka_arima_modelu)-posun)]
ar <- pomocna_tabulka[i, "AR"]
i <- pomocna_tabulka[i, "I"]
ma <- pomocna_tabulka[i, "MA"]
model <- forecast::Arima(data, order = c(ar,d,ma))
pomocna_tabulka$pom_AIC <- model$aic
pomocna_tabulka$pom_AICc <- model$aicc
pomocna_tabulka$pom_BIC <- model$bic
residuals <- data - fitted(model)
pomocna_tabulka$pom_mae <- round(mean(abs(residuals)), cifra)
pomocna_tabulka$pom_mse <- round(mean(residuals^2), cifra)
pomocna_tabulka$pom_rmse <- round(sqrt(mean(residuals^2)), cifra)
}
pomocna_tabulka <- pomocna_tabulka %>%
mutate_at(vars(-row_names), as.numeric)
for (i in 1:nrow(pomocna_tabulka)) {
posun <- pomocna_tabulka[i, "posun"]
data <- ts_real_inf[1:(length(tabulka_arima_modelu)-posun)]
ar <- pomocna_tabulka[i, "AR"]
i <- pomocna_tabulka[i, "I"]
ma <- pomocna_tabulka[i, "MA"]
model <- forecast::Arima(data, order = c(ar,d,ma))
pomocna_tabulka$pom_AIC <- model$aic
pomocna_tabulka$pom_AICc <- model$aicc
pomocna_tabulka$pom_BIC <- model$bic
residuals <- data - fitted(model)
pomocna_tabulka$pom_mae <- round(mean(abs(residuals)), cifra)
pomocna_tabulka$pom_mse <- round(mean(residuals^2), cifra)
pomocna_tabulka$pom_rmse <- round(sqrt(mean(residuals^2)), cifra)
}
for (i in 1:nrow(pomocna_tabulka)) {
posun <- pomocna_tabulka[i, "posun"]
data <- ts_real_inf[1:(length(tabulka_arima_modelu)-posun)]
ar <- pomocna_tabulka[i, "AR"]
i <- pomocna_tabulka[i, "I"]
ma <- pomocna_tabulka[i, "MA"]
orderos <- c(ar, i , ma)
print(orderos)
model <- forecast::Arima(data, order = orderos)
pomocna_tabulka$pom_AIC <- model$aic
pomocna_tabulka$pom_AICc <- model$aicc
pomocna_tabulka$pom_BIC <- model$bic
residuals <- data - fitted(model)
pomocna_tabulka$pom_mae <- round(mean(abs(residuals)), cifra)
pomocna_tabulka$pom_mse <- round(mean(residuals^2), cifra)
pomocna_tabulka$pom_rmse <- round(sqrt(mean(residuals^2)), cifra)
}
for (i in 1:nrow(pomocna_tabulka)) {
posun <- pomocna_tabulka[i, "posun"]
data <- ts_real_inf[1:(length(tabulka_arima_modelu)-posun)]
ar <- pomocna_tabulka[i, "AR"]
i <- pomocna_tabulka[i, "I"]
ma <- pomocna_tabulka[i, "MA"]
print(ma)
orderos <- c(ar, i , ma)
print(orderos)
model <- forecast::Arima(data, order = orderos)
pomocna_tabulka$pom_AIC <- model$aic
pomocna_tabulka$pom_AICc <- model$aicc
pomocna_tabulka$pom_BIC <- model$bic
residuals <- data - fitted(model)
pomocna_tabulka$pom_mae <- round(mean(abs(residuals)), cifra)
pomocna_tabulka$pom_mse <- round(mean(residuals^2), cifra)
pomocna_tabulka$pom_rmse <- round(sqrt(mean(residuals^2)), cifra)
}
pomocna_tabulka[1, "MA"]
for (i in 1:nrow(pomocna_tabulka)) {
posun <- pomocna_tabulka[i, "posun"]
data <- ts_real_inf[1:(length(tabulka_arima_modelu)-posun)]
ar <- pomocna_tabulka[i, "AR"]
dif <- pomocna_tabulka[i, "I"]
ma <- pomocna_tabulka[i, "MA"]
print(ma)
orderos <- c(ar, dif , ma)
print(orderos)
model <- forecast::Arima(data, order = orderos)
pomocna_tabulka$pom_AIC <- model$aic
pomocna_tabulka$pom_AICc <- model$aicc
pomocna_tabulka$pom_BIC <- model$bic
residuals <- data - fitted(model)
pomocna_tabulka$pom_mae <- round(mean(abs(residuals)), cifra)
pomocna_tabulka$pom_mse <- round(mean(residuals^2), cifra)
pomocna_tabulka$pom_rmse <- round(sqrt(mean(residuals^2)), cifra)
}
for (i in 1:nrow(pomocna_tabulka)) {
posun <- pomocna_tabulka[i, "posun"]
data <- ts_real_inf[1:(length(tabulka_arima_modelu)-posun)]
ar <- pomocna_tabulka[i, "AR"]
dif <- pomocna_tabulka[i, "I"]
ma <- pomocna_tabulka[i, "MA"]
print(ma)
orderos <- c(ar, dif , ma)
print(orderos)
model <- try(forecast::Arima(data, order = orderos))
if (!inherits(arima_model, "try-error")) {
# Store the ARIMA model in the list if no error occurred
} else {
# Print a message and continue to the next iteration if an error occurred
cat("Error encountered for ARIMA(", i) # . Skipping this model.\n")
next  # Continue to the next iteration
}
pomocna_tabulka$pom_AIC <- model$aic
pomocna_tabulka$pom_AICc <- model$aicc
pomocna_tabulka$pom_BIC <- model$bic
residuals <- data - fitted(model)
pomocna_tabulka$pom_mae <- round(mean(abs(residuals)), cifra)
pomocna_tabulka$pom_mse <- round(mean(residuals^2), cifra)
pomocna_tabulka$pom_rmse <- round(sqrt(mean(residuals^2)), cifra)
}
View(tabulka_arima_modelu)
for (i in 1:nrow(pomocna_tabulka)) {
posun <- pomocna_tabulka[i, "posun"]
data <- ts_real_inf[1:(length(tabulka_arima_modelu)-posun)]
ar <- pomocna_tabulka[i, "AR"]
dif <- pomocna_tabulka[i, "I"]
ma <- pomocna_tabulka[i, "MA"]
print(ma)
orderos <- c(ar, dif , ma)
print(orderos)
model <- try(forecast::Arima(data, order = orderos))
if (!inherits(arima_model, "try-error")) {
# Store the ARIMA model in the list if no error occurred
} else {
# Print a message and continue to the next iteration if an error occurred
cat("Error encountered for ARIMA(", i) # . Skipping this model.\n")
next  # Continue to the next iteration
}
pomocna_tabulka[i, "pom_AIC"] <- model$aic
pomocna_tabulka[i, "pom_AICc"] <- model$aicc
pomocna_tabulka[i, "pom_BIC"] <- model$bic
residuals <- data - fitted(model)
pomocna_tabulka[i, "pom_mae"] <- round(mean(abs(residuals)), cifra)
pomocna_tabulka[i, "pom_mse"] <- round(mean(residuals^2), cifra)
pomocna_tabulka[i, "pom_rmse"] <- round(sqrt(mean(residuals^2)), cifra)
}
for (i in 1:nrow(pomocna_tabulka)) {
posun <- pomocna_tabulka[i, "posun"]
data <- ts_real_inf[1:(length(tabulka_arima_modelu)-posun)]
ar <- pomocna_tabulka[i, "AR"]
dif <- pomocna_tabulka[i, "I"]
ma <- pomocna_tabulka[i, "MA"]
print(ma)
orderos <- c(ar, dif , ma)
print(orderos)
model <- try(forecast::Arima(data, order = orderos))
if (!inherits(arima_model, "try-error")) {
# Store the ARIMA model in the list if no error occurred
} else {
# Print a message and continue to the next iteration if an error occurred
cat("Error encountered for ARIMA(", i) # . Skipping this model.\n")
next  # Continue to the next iteration
}
print(model$aic)
pomocna_tabulka[i, "pom_AIC"] <- model$aic
pomocna_tabulka[i, "pom_AICc"] <- model$aicc
pomocna_tabulka[i, "pom_BIC"] <- model$bic
residuals <- data - fitted(model)
pomocna_tabulka[i, "pom_mae"] <- round(mean(abs(residuals)), cifra)
pomocna_tabulka[i, "pom_mse"] <- round(mean(residuals^2), cifra)
pomocna_tabulka[i, "pom_rmse"] <- round(sqrt(mean(residuals^2)), cifra)
}
data
ts_real_inf
ts_real_inf[1:(length(tabulka_arima_modelu)-posun)]
posun
save.image("C:/Users/N/Documents/Desktop/diploma/env2.RData")
