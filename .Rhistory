m <- matrix(c(ts_deu_sd, ts_detrended_data), ncol = 2)
cor_value <- cor(m[,1], m[,2], use = "pairwise.complete.obs")#, use = "pairwise.complete.obs")
print(paste0("Correlation for column ", i - 1, ": ", cor_value, colnames(gt)[g]))
#print(ts_detrended_data[1:30])
data_frames[[paste0("df_", g)]] <- ts_detrended_data
}
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_deu_sd, order = c(1,1,1), xreg = ts_detrended_data)
summary(arima_model)
# Generate the fitted values
fitted_values <- arima_model$fitted
# Plot the actual and fitted values
plot(ts_real_inf, main = "ARIMA(1,1,0) Fitted Values for Inflation",
xlab = "Time", ylab = "Real Inflation")
lines(fitted_values, col = "red")
legend("topleft", legend = c("Actual", "Fitted"), lty = c(1,1), col = c("black", "red"))
# Plot the actual and fitted values
plot(ts_deu_sd, main = "ARIMA(1,1,0) Fitted Values for Inflation",
xlab = "Time", ylab = "Real Inflation")
lines(fitted_values, col = "red")
legend("topleft", legend = c("Actual", "Fitted"), lty = c(1,1), col = c("black", "red"))
######################################################################################################
# Load the necessary packages
library(vars)
# Load the necessary packages
library(vars)
# Combine the time series into a matrix
data_matrix <- cbind(ts_deu_sd, ts_detrended_data)
complete_matrix <- data_matrix[complete.cases(data_matrix), ]
# Fit a VAR model with lag length 1
var_model <- vars::VAR(complete_matrix, p = 1, type = "const")
# Print a summary of the model
summary(var_model)
?stl
library(readxl)
library(dplyr)
library(forecast)
library(aTSA)
library(tseries)
library(stringr)
library(lmtest)
library(rugarch)
rm(list = ls())
data <- list()
pocet_sheetu <- 4
for (i in 1:pocet_sheetu) {
data[[i]] <- read_excel("inflace.xlsx", sheet = i)
}
data[[2]] %>% head
for (i in 1:pocet_sheetu) {
x <- data[[i]]
y <- data.frame(x[,-1], row.names = x$Year)
data[[i]] <- y
}
for (i in 1:pocet_sheetu) {
print(i)
print(data[[i]] %>% head)
print(data[[i]] %>% dim)
}
data[[4]] <- data[[4]][,-13] # remove aggregate column nebo co to je
inf_cpm     <- data[[3]] %>% t %>% unlist %>% as.vector
inf_cpm     <- ts(inf_cpm, frequency = 12, start = c(1997, 1))  # inf, corresponding preceeding month
inf_cpm
plot(inf_cpm)
gt <- read.csv("search_trends.csv", row.names = 1)
gt %>% head
gt%>% dim
start <- rownames(gt)[1]
rok   <- as.numeric(substr(start, 1, 4))
mesic <- as.numeric(substr(start, 6, 7))
start <- c(rok, mesic)
print(start)
end   <- c(2022, 4)
gt_inf   <- ts(gt$inflace, frequency = 12, start = start)
plot(gt_inf)
tseries::adf.test(gt_inf)
s_inf_cpm <- decompose(inf_cpm, "multiplicative")$random
plot(s_inf_cpm)
s_gt_inf <- decompose(gt_inf, "multiplicative")$random
plot(s_gt_inf)
s_inf_cpm_s <- ts(s_inf_cpm, frequency = 12, start = c(rok, mesic + 1), end = end)
s_gt_inf_s <- ts(s_gt_inf, frequency = 12, start = c(rok, mesic + 1), end = end)
length(s_inf_cpm_s)
length(s_gt_inf_s)
s_gt_inf_s <- s_gt_inf_s / mean(s_gt_inf_s, na.rm = TRUE) * mean(s_inf_cpm_s, na.rm = TRUE)
s_inf_cpm_s
s_gt_inf_s
plot(s_inf_cpm_s)
plot(s_gt_inf_s)
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 1)
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 2)
# Load the necessary packages
library(forecast)
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_real_inf, order = c(1,1,1), xreg = ts_gt_inf)
summary(arima_model)
acf(arima_model)
pacf(arima_model)
# Generate the fitted values
fitted_values <- arima_model$fitted
# Plot the actual and fitted values
plot(ts_real_inf, main = "ARIMA(1,1,0) Fitted Values for Inflation",
xlab = "Time", ylab = "Real Inflation")
lines(fitted_values, col = "red")
legend("topleft", legend = c("Actual", "Fitted"), lty = c(1,1), col = c("black", "red"))
######################################################################################################
# Load the necessary packages
library(vars)
# Load the necessary packages
library(vars)
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Combine the time series into a matrix
data_matrix <- cbind(ts_real_inf, ts_gt_inf)
complete_matrix <- data_matrix[complete.cases(data_matrix), ]
# Fit a VAR model with lag length 1
var_model <- vars::VAR(complete_matrix, p = 1, type = "const")
# Print a summary of the model
summary(var_model)
# Plot the impulse response function for the Google Trends variable
irf_plot <- plot(vars::irf(var_model, impulse = "ts_gt_inf", response = "ts_real_inf", n.ahead = 12))
# Convert each column of the data frame to a time series and remove seasonality
for (i in 1:ncol(gt)) {
ts_data <- ts(gt[, i], start = c(2000, 1), frequency = 12)
decomp_data <- decompose(ts_data)
detrended_data <- decomp_data$x #+ decomp_data$trend #trend #seasonal
ts_detrended_data <- ts(detrended_data, start = start, end = end, frequency = 12)
ts_detrended_data <- ts_detrended_data[-length(ts_detrended_data)]
cor_value <- cor(ts_detrended_data, ts_real_inf, use = "pairwise.complete.obs")
print(paste0("Correlation for column ", i - 1, ": ", cor_value))
print(ts_detrended_data[1:30])
}
View(gt)
library(readxl)
library(dplyr)
library(forecast)
library(aTSA)
library(tseries)
library(stringr)
library(lmtest)
library(rugarch)
rm(list = ls())
data <- list()
pocet_sheetu <- 4
for (i in 1:pocet_sheetu) {
data[[i]] <- read_excel("inflace.xlsx", sheet = i)
}
data[[2]] %>% head
for (i in 1:pocet_sheetu) {
x <- data[[i]]
y <- data.frame(x[,-1], row.names = x$Year)
data[[i]] <- y
}
for (i in 1:pocet_sheetu) {
print(i)
print(data[[i]] %>% head)
print(data[[i]] %>% dim)
}
data[[4]] <- data[[4]][,-13] # remove aggregate column nebo co to je
inf_cpm     <- data[[3]] %>% t %>% unlist %>% as.vector
inf_cpm     <- ts(inf_cpm, frequency = 12, start = c(1997, 1))  # inf, corresponding preceeding month
inf_cpm
plot(inf_cpm)
gt <- read.csv("search_trends.csv", row.names = 1)
gt %>% head
gt%>% dim
start <- rownames(gt)[1]
rok   <- as.numeric(substr(start, 1, 4))
mesic <- as.numeric(substr(start, 6, 7))
start <- c(rok, mesic)
print(start)
end   <- c(2022, 4)
gt_inf   <- ts(gt$cena, frequency = 12, start = start)
plot(gt_inf)
tseries::adf.test(gt_inf)
s_inf_cpm <- decompose(inf_cpm, "multiplicative")$random
plot(s_inf_cpm)
s_gt_inf <- decompose(gt_inf, "multiplicative")$random
plot(s_gt_inf)
s_inf_cpm_s <- ts(s_inf_cpm, frequency = 12, start = c(rok, mesic + 1), end = end)
s_gt_inf_s <- ts(s_gt_inf, frequency = 12, start = c(rok, mesic + 1), end = end)
length(s_inf_cpm_s)
length(s_gt_inf_s)
s_gt_inf_s <- s_gt_inf_s / mean(s_gt_inf_s, na.rm = TRUE) * mean(s_inf_cpm_s, na.rm = TRUE)
s_inf_cpm_s
s_gt_inf_s
plot(s_inf_cpm_s)
plot(s_gt_inf_s)
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 1)
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 2)
# Load the necessary packages
library(forecast)
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 1)
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 2)
lmtest::grangertest(s_inf_cpm_s, s_gt_inf_s, order = 1)
lmtest::grangertest(s_inf_cpm_s, s_gt_inf_s, order = 2)
# Load the necessary packages
library(forecast)
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_real_inf, order = c(1,1,1), xreg = ts_gt_inf)
summary(arima_model)
acf(arima_model)
pacf(arima_model)
# Generate the fitted values
fitted_values <- arima_model$fitted
# Plot the actual and fitted values
plot(ts_real_inf, main = "ARIMA(1,1,0) Fitted Values for Inflation",
xlab = "Time", ylab = "Real Inflation")
lines(fitted_values, col = "red")
View(gt)
gt_inf   <- ts(gt$cena, frequency = 12, start = start)
plot(gt_inf)
tseries::adf.test(gt_inf)
s_inf_cpm <- decompose(inf_cpm, "multiplicative")$random
plot(s_inf_cpm)
s_gt_inf <- decompose(gt_inf, "multiplicative")$random
plot(s_gt_inf)
s_inf_cpm_s <- ts(s_inf_cpm, frequency = 12, start = c(rok, mesic + 1), end = end)
s_gt_inf_s <- ts(s_gt_inf, frequency = 12, start = c(rok, mesic + 1), end = end)
length(s_inf_cpm_s)
length(s_gt_inf_s)
s_gt_inf_s <- s_gt_inf_s / mean(s_gt_inf_s, na.rm = TRUE) * mean(s_inf_cpm_s, na.rm = TRUE)
s_inf_cpm_s
s_gt_inf_s
plot(s_inf_cpm_s)
plot(s_gt_inf_s)
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 1)
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 2)
lmtest::grangertest(s_inf_cpm_s, s_gt_inf_s, order = 1)
lmtest::grangertest(s_inf_cpm_s, s_gt_inf_s, order = 2)
# Load the necessary packages
library(forecast)
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_real_inf, order = c(1,1,1), xreg = ts_gt_inf)
summary(arima_model)
acf(arima_model)
pacf(arima_model)
# Generate the fitted values
fitted_values <- arima_model$fitted
# Plot the actual and fitted values
plot(ts_real_inf, main = "ARIMA(1,1,0) Fitted Values for Inflation",
xlab = "Time", ylab = "Real Inflation")
lines(fitted_values, col = "red")
gt_inf   <- ts(gt$inflation, frequency = 12, start = start)
plot(gt_inf)
tseries::adf.test(gt_inf)
s_inf_cpm <- decompose(inf_cpm, "multiplicative")$random
plot(s_inf_cpm)
s_gt_inf <- decompose(gt_inf, "multiplicative")$random
plot(s_gt_inf)
s_inf_cpm_s <- ts(s_inf_cpm, frequency = 12, start = c(rok, mesic + 1), end = end)
s_gt_inf_s <- ts(s_gt_inf, frequency = 12, start = c(rok, mesic + 1), end = end)
length(s_inf_cpm_s)
length(s_gt_inf_s)
s_gt_inf_s <- s_gt_inf_s / mean(s_gt_inf_s, na.rm = TRUE) * mean(s_inf_cpm_s, na.rm = TRUE)
s_inf_cpm_s
s_gt_inf_s
plot(s_inf_cpm_s)
plot(s_gt_inf_s)
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 1)
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 2)
lmtest::grangertest(s_inf_cpm_s, s_gt_inf_s, order = 1)
lmtest::grangertest(s_inf_cpm_s, s_gt_inf_s, order = 2)
# Load the necessary packages
library(forecast)
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_real_inf, order = c(1,1,1), xreg = ts_gt_inf)
summary(arima_model)
acf(arima_model)
pacf(arima_model)
# Generate the fitted values
fitted_values <- arima_model$fitted
# Plot the actual and fitted values
plot(ts_real_inf, main = "ARIMA(1,1,0) Fitted Values for Inflation",
xlab = "Time", ylab = "Real Inflation")
lines(fitted_values, col = "red")
gt_inf   <- ts(gt$prices, frequency = 12, start = start)
plot(gt_inf)
tseries::adf.test(gt_inf)
s_inf_cpm <- decompose(inf_cpm, "multiplicative")$random
plot(s_inf_cpm)
s_gt_inf <- decompose(gt_inf, "multiplicative")$random
plot(s_gt_inf)
s_inf_cpm_s <- ts(s_inf_cpm, frequency = 12, start = c(rok, mesic + 1), end = end)
s_gt_inf_s <- ts(s_gt_inf, frequency = 12, start = c(rok, mesic + 1), end = end)
length(s_inf_cpm_s)
length(s_gt_inf_s)
s_gt_inf_s <- s_gt_inf_s / mean(s_gt_inf_s, na.rm = TRUE) * mean(s_inf_cpm_s, na.rm = TRUE)
s_inf_cpm_s
s_gt_inf_s
plot(s_inf_cpm_s)
plot(s_gt_inf_s)
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 1)
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 2)
lmtest::grangertest(s_inf_cpm_s, s_gt_inf_s, order = 1)
lmtest::grangertest(s_inf_cpm_s, s_gt_inf_s, order = 2)
# Load the necessary packages
library(forecast)
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_real_inf, order = c(1,1,1), xreg = ts_gt_inf)
summary(arima_model)
acf(arima_model)
pacf(arima_model)
# Generate the fitted values
fitted_values <- arima_model$fitted
# Plot the actual and fitted values
plot(ts_real_inf, main = "ARIMA(1,1,0) Fitted Values for Inflation",
xlab = "Time", ylab = "Real Inflation")
lines(fitted_values, col = "red")
legend("topleft", legend = c("Actual", "Fitted"), lty = c(1,1), col = c("black", "red"))
gt_inf   <- ts(gt$prices, frequency = 12, start = start)
plot(gt_inf)
gt_inf   <- ts(gt$inflation, frequency = 12, start = start)
plot(gt_inf)
plot(gt_inf)
tseries::adf.test(gt_inf)
s_inf_cpm <- decompose(inf_cpm, "multiplicative")$random
plot(s_inf_cpm)
s_gt_inf <- decompose(gt_inf, "multiplicative")$random
plot(s_gt_inf)
s_inf_cpm_s <- ts(s_inf_cpm, frequency = 12, start = c(rok, mesic + 1), end = end)
s_gt_inf_s <- ts(s_gt_inf, frequency = 12, start = c(rok, mesic + 1), end = end)
length(s_inf_cpm_s)
length(s_gt_inf_s)
s_gt_inf_s <- s_gt_inf_s / mean(s_gt_inf_s, na.rm = TRUE) * mean(s_inf_cpm_s, na.rm = TRUE)
s_inf_cpm_s
s_gt_inf_s
plot(s_inf_cpm_s)
plot(s_gt_inf_s)
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 1)
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 2)
lmtest::grangertest(s_inf_cpm_s, s_gt_inf_s, order = 1)
lmtest::grangertest(s_inf_cpm_s, s_gt_inf_s, order = 2)
# Load the necessary packages
library(forecast)
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_real_inf, order = c(1,1,1), xreg = ts_gt_inf)
summary(arima_model)
acf(arima_model)
pacf(arima_model)
# Generate the fitted values
fitted_values <- arima_model$fitted
# Plot the actual and fitted values
plot(ts_real_inf, main = "ARIMA(1,1,0) Fitted Values for Inflation",
xlab = "Time", ylab = "Real Inflation")
lines(fitted_values, col = "red")
legend("topleft", legend = c("Actual", "Fitted"), lty = c(1,1), col = c("black", "red"))
arima_model <- forecast::Arima(ts_real_inf, order = c(1,1,1))
summary(arima_model)
s_inf_cpm
s_inf_cpm_s
######################################################################################################
# Additional regressor hovna
gt_cena   <- ts(gt$cena, frequency = 12, start = start)
plot(gt_cena)
tseries::adf.test(gt_cena)
s_gt_cena <- decompose(gt_cena, "multiplicative")$random
s_gt_cena_s <- ts(s_gt_cena, frequency = 12, start = c(rok, mesic + 1), end = end)
matrix(c(s_gt_inf_s, s_gt_cena_s))
matrix(c(s_gt_inf_s, s_gt_cena_s), ncol = 2)
regresory <- as.data.frame(matrix(c(s_gt_inf_s, s_gt_cena_s), ncol = 2))
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_real_inf, order = c(1,1,1), xreg = regresory), #ts_gt_inf)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_real_inf, order = c(1,1,1), xreg = regresory)#, #ts_gt_inf)
regresory <- as.numeric(regresory)
is.data.frame(regresory)
regresory <- data.frame(lapply(regresory, as.numeric))
# Load the necessary packages
library(forecast)
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_real_inf, order = c(1,1,1), xreg = regresory)#, #ts_gt_inf)
summary(arima_model)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_real_inf, order = c(1,1,1), xreg = regresory)#, #ts_gt_inf)
regresory <- matrix(c(s_gt_inf_s, s_gt_cena_s), ncol = 2)
regresory <- data.frame(lapply(regresory, as.numeric))
class(regresory)
regresory <- matrix(c(s_gt_inf_s, s_gt_cena_s), ncol = 2)
regresory <- data.frame(lapply(regresory, as.numeric))
regresory <- as.matrix(regresory)
# Load the necessary packages
library(forecast)
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_real_inf, order = c(1,1,1), xreg = regresory)#, #ts_gt_inf)
summary(arima_model)
# Load required packages
install.packages("forecast")
library(forecast)
install.packages("forecast")
# Generate sample data
set.seed(123)
n <- 100
y <- ts(rnorm(n))
install.packages("forecast")
x1 <- rnorm(n)
x2 <- rnorm(n)
# Create a matrix of additional regressors
X <- cbind(x1, x2)
# Fit the ARIMA model with additional regressors
arima_model <- auto.arima(y, xreg = X)
# Display the model
print(arima_model)
X
regresory %>% dim
dim()
regresory
regresory <- matrix(c(s_gt_inf_s, s_gt_cena_s), ncol = 2)
regresory
regresory <- data.frame(lapply(regresory, as.numeric))
regresory
regresory <- as.data.frame(matrix(c(s_gt_inf_s, s_gt_cena_s), ncol = 2))
regresory <- data.frame(lapply(regresory, as.numeric))
regresory
regresory <- as.matrix(regresory)
regresory
# Load the necessary packages
library(forecast)
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_real_inf, order = c(1,1,1), xreg = regresory)#, #ts_gt_inf)
summary(arima_model)
s_gt_inf <- decompose(gt_inf, "multiplicative")$random
plot(s_gt_inf)
plot(gt_cena)
######################################################################################################
# Additional regressor hovna
gt_cena   <- ts(gt$prices, frequency = 12, start = start)
plot(gt_cena)
tseries::adf.test(gt_cena)
s_gt_cena <- decompose(gt_cena, "multiplicative")$random
s_gt_cena_s <- ts(s_gt_cena, frequency = 12, start = c(rok, mesic + 1), end = end)
regresory <- as.data.frame(matrix(c(s_gt_inf_s, s_gt_cena_s), ncol = 2))
regresory <- data.frame(lapply(regresory, as.numeric))
regresory <- as.matrix(regresory)
# Load the necessary packages
library(forecast)
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_real_inf, order = c(1,1,1), xreg = regresory)#, #ts_gt_inf)
summary(arima_model)
gt_inf   <- ts(gt$cena, frequency = 12, start = start)
plot(gt_inf)
tseries::adf.test(gt_inf)
s_inf_cpm <- decompose(inf_cpm, "multiplicative")$random
plot(s_inf_cpm)
s_gt_inf <- decompose(gt_inf, "multiplicative")$random
plot(s_gt_inf)
s_inf_cpm_s <- ts(s_inf_cpm, frequency = 12, start = c(rok, mesic + 1), end = end)
s_gt_inf_s <- ts(s_gt_inf, frequency = 12, start = c(rok, mesic + 1), end = end)
length(s_inf_cpm_s)
length(s_gt_inf_s)
s_gt_inf_s <- s_gt_inf_s / mean(s_gt_inf_s, na.rm = TRUE) * mean(s_inf_cpm_s, na.rm = TRUE)
s_inf_cpm_s
s_gt_inf_s
plot(s_inf_cpm_s)
plot(s_gt_inf_s)
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 1)
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 2)
lmtest::grangertest(s_inf_cpm_s, s_gt_inf_s, order = 1)
lmtest::grangertest(s_inf_cpm_s, s_gt_inf_s, order = 2)
######################################################################################################
# Additional regressor hovna
gt_cena   <- ts(gt$prices, frequency = 12, start = start)
plot(gt_cena)
tseries::adf.test(gt_cena)
s_gt_cena <- decompose(gt_cena, "multiplicative")$random
s_gt_cena_s <- ts(s_gt_cena, frequency = 12, start = c(rok, mesic + 1), end = end)
regresory <- as.data.frame(matrix(c(s_gt_inf_s, s_gt_cena_s), ncol = 2))
regresory <- data.frame(lapply(regresory, as.numeric))
regresory <- as.matrix(regresory)
# Load the necessary packages
library(forecast)
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_real_inf, order = c(1,1,1), xreg = regresory)#, #ts_gt_inf)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_real_inf, order = c(1,1,1), xreg = s_gt_inf_s)#, #ts_gt_inf)
summary(arima_model)
