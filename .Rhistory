inf_cpm     <- ts(inf_cpm, frequency = 12, start = c(1997, 1))  # inf, corresponding preceeding month
inf_classic <- ts(inf_classic, frequency = 12, start = c(1998, 1))
gt <- read.csv("search_trends.csv", row.names = 1)
gt %>% head
gt%>% dim
start <- rownames(gt)[1]
rok   <- as.numeric(substr(start, 1, 4))
mesic <- as.numeric(substr(start, 6, 7))
start <- c(rok, mesic)
print(start)
end   <- c(2022, 4)
gt_inf   <- ts(gt$inflace, frequency = 12, start = start)
gt_inf_s <- gt_inf
plot(gt_inf)
tseries::adf.test(gt_inf)
start <- c(2004, 1)
end   <- c(2022, 4)
inf_fd_s <- window(inf_fd,  start = start, end = end)
plot(inf_fd_s)
tseries::adf.test(inf_fd_s)
inf_sd_s <- diff(inf_fd_s)
plot(inf_sd_s)
tseries::adf.test(inf_sd_s)
inf_cmpy_s <- window(inf_cmpy, start = start, end = end)
plot(inf_cmpy_s)
tseries::adf.test(inf_cmpy_s)
inf_cmpy_s_sd <- diff(inf_cmpy_s)
plot(inf_cmpy_s_sd)
tseries::adf.test(inf_cmpy_s_sd)
inf_cpm_s <- window(inf_cpm, start = start, end = end)
plot(inf_cpm_s)
tseries::adf.test(inf_cpm_s)
inf_cpm_s_sd <- diff(inf_cpm_s)
plot(inf_cpm_s_sd)
tseries::adf.test(inf_cpm_s_sd)
inf_classic_s <- window(inf_classic, start = start, end = end) #subsetuju podle gt
inf_classic_s <- inf_classic_s * 100 / inf_classic_s[1]        #preskaluju aby base year
inf_classic_fd <- diff(inf_classic_s)
plot(inf_classic_fd)
tseries::adf.test(inf_classic_fd)
tseries::kpss.test(inf_classic_fd, null = c("Level", "Trend"))
Box.test(inf_classic_fd, type = "Ljung-Box")
#second difference - not finished
inf_classic_sd <- diff(inf_classic_fd)
plot(inf_classic_sd)
tseries::adf.test(inf_classic_sd_s)
gt_inf_s <- gt_inf
gt_inf_s
gt_inf_s <- gt_inf_s / mean(gt_inf_s) * mean(inf_cpm_s)
gt_inf_s
gt_inf_s <- gt_inf_s[-1]
gt_inf_s <- ts(gt_inf_s, frequency = 12, start = c(rok, mesic + 1))
model <- lm(inf_classic_fd ~ gt_inf_s)
summary(model)
plot(gt_inf_s, as.vector(inf_classic_fd), xlim = c(-1,4), ylim = c(-1,4))
abline(model$coefficients[1], model$coefficients[2])
plot(as.vector(inf_classic_fd), model$fitted.values, xlim = c(-1,3), ylim = c(-1,3))
abline(0, 1)
plot.ts(inf_classic_fd, main = "Predikce a inflace")
x <- ts(model$fitted.values, frequency = 12, start = c(rok, mesic + 1))
#lines(x, col = "red")
lines(gt_inf_s, col = "blue")
inf_classic_s <- window(inf_classic, start = start, end = end)
inf_classic_s <- inf_classic_s / inf_classic_s[1] * 100
inf_classic_s_fd <- diff(inf_classic_s)
plot(inf_classic_s_fd)
gt_inf_s <- window(gt_inf, start = start, end = end)
gt_inf_s <- gt_inf_s * 100 / gt_inf_s[1]
plot(gt_inf_s)
gt_inf_s <- gt_inf_s[-1]
model <- lm(inf_classic_s_fd ~ gt_inf_s)
summary(model)
gt_inf_s <- ts(gt_inf_s, frequency = 12, start = c(rok, mesic + 1))
lmtest::grangertest(inf_cpm_s, gt_inf_s, order = 3)
model <- lm(inf_cpm_s ~ gt_inf_s, data = pomocny_df)
summary(model)
plot(inf_cpm_s, gt_inf_s)
plot(gt_inf_s)
plot(inf_cpm_s)
s_gt_inf_s <- decompose(gt_inf_s, "multiplicative")$random
plot(s_gt_inf_s)
s_inf_cpm_s <- decompose(inf_cpm_s, "multiplicative")$random
plot(s_inf_cpm_s)
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 1)
tseries::adf.test(s_gt_inf_s[7:213])
tseries::adf.test(s_inf_cpm_s[7:213])
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 1)
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 2)
for (i in 1:5){
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = i)
}
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = i) %>% print()
for (i in 1:5){
print(lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = i))
}
length(s_gt_inf_s)
length(s_inf_cpm_s)
length(inf_cpm_s)
length(gt_inf_s)
ts_gt_inf <- ts(data = s_gt_inf_s, frequency = 12)
# Create a time series object for the real inflation data
ts_real_inf <- ts(data = s_inf_cpm_s[-1], frequency = 12)
# Split the data into training and testing sets
train_data <- window(ts_real_inf, end = c(2016, 12))
test_data <- window(ts_real_inf, start = c(2017, 1))
# Fit the ARIMA(1,1,0) model to the training data
arima_model <- Arima(train_data, order = c(1,1,0), xreg = train(s_gt_inf_s))
s_inf_cpm_s
s_gt_inf_s
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Split the data into training and testing sets
train_data <- window(ts_real_inf, end = c(2016, 12))
test_data <- window(ts_real_inf, start = c(2017, 1))
# Fit the ARIMA(1,1,0) model to the training data
arima_model <- Arima(train_data, order = c(1,1,0), xreg = train(ts_gt_inf))
# Load the necessary packages
library(forecast)
# Fit the ARIMA(1,1,0) model to the training data
arima_model <- Arima(train_data, order = c(1,1,0), xreg = train(ts_gt_inf))
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Split the data into training and testing sets
train_data <- window(ts_real_inf, end = c(2016, 12))
test_data <- window(ts_real_inf, start = c(2017, 1))
# Fit the ARIMA(1,1,0) model to the training data
arima_model <- Arima(train_data, order = c(1,1,0), xreg = train_data[, "s_gt_inf_s"])
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Split the data into training and testing sets
train_data <- window(ts_real_inf, end = c(2016, 12))
test_data <- window(ts_real_inf, start = c(2017, 1))
# Fit the ARIMA(1,1,0) model to the training data
arima_model <- Arima(train_data, order = c(1,1,0), xreg = train_data[, "s_gt_inf_s"])
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Split the data into training and testing sets
train_data <- window(ts_real_inf, end = c(2016, 12))
test_data <- window(ts_real_inf, start = c(2017, 1))
# Fit the ARIMA(1,1,0) model to the training data
arima_model <- Arima(train_data, order = c(1,1,0), xreg = as.matrix(train_data)[, "s_gt_inf_s"])
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Split the data into training and testing sets
train_data <- window(ts_real_inf, end = c(2016, 12))
test_data <- window(ts_real_inf, start = c(2017, 1))
# Fit the ARIMA(1,1,0) model to the training data
arima_model <- Arima(train_data, order = c(1,1,0), xreg = as.matrix(data.frame(train_data, s_gt_inf = ts_gt_inf)[, "s_gt_inf"]))
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Align the Google Trends inflation data with the real inflation data
start_date <- max(start(ts_real_inf), start(ts_gt_inf))
end_date <- min(end(ts_real_inf), end(ts_gt_inf))
ts_gt_inf <- window(ts_gt_inf, start = start_date, end = end_date)
# Split the data into training and testing sets
train_data <- window(ts_real_inf, end = c(2016, 12))
test_data <- window(ts_real_inf, start = c(2017, 1))
# Fit the ARIMA(1,1,0) model to the training data
arima_model <- Arima(train_data, order = c(1,1,0), xreg = as.matrix(data.frame(train_data, s_gt_inf = ts_gt_inf)[, "s_gt_inf"]))
# Forecast the next 12 values using the ARIMA model and the testing data
forecast_data <- forecast(arima_model, xreg = as.matrix(data.frame(test_data, s_gt_inf = ts_gt_inf)[, "s_gt_inf"]), h = 12)
# Plot the actual and forecasted values
plot(forecast_data, main = "ARIMA(1,1,0) Forecast for Inflation",
xlab = "Time", ylab = "Real Inflation")
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Align the Google Trends inflation data with the real inflation data
start_date <- max(start(ts_real_inf), start(ts_gt_inf))
end_date <- min(end(ts_real_inf), end(ts_gt_inf))
ts_gt_inf <- window(ts_gt_inf, start = start_date, end = end_date)
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- Arima(ts_real_inf, order = c(1,1,0), xreg = as.matrix(data.frame(ts_real_inf, s_gt_inf = ts_gt_inf)[, "s_gt_inf"]))
s_inf_cpm_s
s_gt_inf_s
s_gt_inf_s[1] <- NA
s_gt_inf_s
s_inf_cpm_s <- s_inf_cpm_s[-1]
s_inf_cpm_s
length(s_inf_cpm_s)
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- Arima(ts_real_inf, order = c(1,1,0), xreg = as.matrix(data.frame(ts_real_inf, s_gt_inf = ts_gt_inf)[, "s_gt_inf"]))
gt <- read.csv("search_trends.csv", row.names = 1)
gt %>% head
gt%>% dim
start <- rownames(gt)[1]
rok   <- as.numeric(substr(start, 1, 4))
mesic <- as.numeric(substr(start, 6, 7))
start <- c(rok, mesic)
print(start)
end   <- c(2022, 4)
gt_inf   <- ts(gt$inflace, frequency = 12, start = start)
gt_inf
gt_inf_s <- gt_inf
plot(gt_inf)
tseries::adf.test(gt_inf)
gt_inf_s <- gt_inf
gt_inf_s
gt_inf_s <- gt_inf_s / mean(gt_inf_s) * mean(inf_cpm_s)
gt_inf_s
gt_inf_s <- gt_inf_s[-1]
gt_inf_s
gt_inf_s <- ts(gt_inf_s, frequency = 12, start = c(rok, mesic + 1))
gt_inf_s
gt_inf_s
gt_inf_s <- gt_inf
gt_inf_s
gt_inf_s <- gt_inf_s / mean(gt_inf_s) * mean(inf_cpm_s)
gt_inf_s
gt_inf_s <- ts(gt_inf_s, frequency = 12, start = c(rok, mesic + 1))
model <- lm(inf_classic_fd ~ gt_inf_s)
model <- lm(inf_cpm_s ~ gt_inf_s)
summary(model)
gt_inf_s <- gt_inf_s / mean(gt_inf_s) * mean(inf_cpm_s)
gt_inf_s
gt_inf_s <- ts(gt_inf_s, frequency = 12, start = c(rok, mesic + 1))
model <- lm(inf_cpm_s ~ gt_inf_s)
summary(model)
plot(gt_inf_s, as.vector(inf_classic_fd), xlim = c(-1,4), ylim = c(-1,4))
plot(gt_inf_s, as.vector(inf_cpm_s), xlim = c(-1,4), ylim = c(-1,4))
abline(model$coefficients[1], model$coefficients[2])
plot(as.vector(inf_classic_fd), model$fitted.values, xlim = c(-1,3), ylim = c(-1,3))
plot(as.vector(inf_cpm_s), model$fitted.values, xlim = c(-1,3), ylim = c(-1,3))
abline(0, 1)
plot.ts(inf_classic_fd, main = "Predikce a inflace")
plot.ts(inf_cpm_s, main = "Predikce a inflace")
x <- ts(model$fitted.values, frequency = 12, start = c(rok, mesic + 1))
#lines(x, col = "red")
lines(gt_inf_s, col = "blue")
inf_classic_s <- window(inf_classic, start = start, end = end)
inf_classic_s <- inf_classic_s / inf_classic_s[1] * 100
inf_classic_s_fd <- diff(inf_classic_s)
plot(inf_classic_s_fd)
gt_inf_s <- window(gt_inf, start = start, end = end)
gt_inf_s <- gt_inf_s * 100 / gt_inf_s[1]
plot(gt_inf_s)
gt_inf_s <- gt_inf_s[-1]
model <- lm(inf_classic_s_fd ~ gt_inf_s)
summary(model)
gt_inf_s <- ts(gt_inf_s, frequency = 12, start = c(rok, mesic + 1))
lmtest::grangertest(inf_cpm_s, gt_inf_s, order = 3)
gt_inf_s
inf_cpm_s
model <- lm(inf_cpm_s ~ gt_inf_s, data = pomocny_df)
summary(model)
model <- lm(inf_cpm_s ~ gt_inf_s)
gt_inf_s <- gt_inf
gt_inf_s
gt_inf_s <- gt_inf_s / mean(gt_inf_s) * mean(inf_cpm_s)
gt_inf_s
gt_inf_s <- ts(gt_inf_s, frequency = 12, start = c(rok, mesic + 1))
model <- lm(inf_cpm_s ~ gt_inf_s)
summary(model)
plot(gt_inf_s, as.vector(inf_cpm_s), xlim = c(-1,4), ylim = c(-1,4))
abline(model$coefficients[1], model$coefficients[2])
plot(as.vector(inf_cpm_s), model$fitted.values, xlim = c(-1,3), ylim = c(-1,3))
abline(0, 1)
plot.ts(inf_cpm_s, main = "Predikce a inflace")
x <- ts(model$fitted.values, frequency = 12, start = c(rok, mesic + 1))
#lines(x, col = "red")
lines(gt_inf_s, col = "blue")
inf_classic_s <- window(inf_classic, start = start, end = end)
inf_classic_s <- inf_classic_s / inf_classic_s[1] * 100
inf_classic_s_fd <- diff(inf_classic_s)
plot(inf_classic_s_fd)
gt_inf_s <- window(gt_inf, start = start, end = end)
gt_inf_s <- gt_inf_s * 100 / gt_inf_s[1]
plot(gt_inf_s)
gt_inf_s <- gt_inf_s[-1]
model <- lm(inf_classic_s_fd ~ gt_inf_s)
summary(model)
gt_inf_s <- ts(gt_inf_s, frequency = 12, start = c(rok, mesic + 1))
lmtest::grangertest(inf_cpm_s, gt_inf_s, order = 3)
model <- lm(inf_cpm_s ~ gt_inf_s)
gt_inf_s
summary(model)
plot(inf_cpm_s, gt_inf_s)
plot(gt_inf_s)
plot(inf_cpm_s)
s_gt_inf_s <- decompose(gt_inf_s, "multiplicative")$random
plot(s_gt_inf_s)
s_inf_cpm_s <- decompose(inf_cpm_s, "multiplicative")$random
plot(s_inf_cpm_s)
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 1)
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 2)
length(s_inf_cpm_s)
length(inf_cpm_s)
length(gt_inf_s)
tseries::adf.test(s_gt_inf_s[7:213])
tseries::adf.test(s_inf_cpm_s[7:213])
library(readxl)
library(dplyr)
library(forecast)
library(aTSA)
library(tseries)
library(stringr)
library(lmtest)
library(rugarch)
rm(list = ls())
data <- list()
pocet_sheetu <- 4
for (i in 1:pocet_sheetu) {
data[[i]] <- read_excel("inflace.xlsx", sheet = i)
}
data[[2]] %>% head
for (i in 1:pocet_sheetu) {
x <- data[[i]]
y <- data.frame(x[,-1], row.names = x$Year)
data[[i]] <- y
}
for (i in 1:pocet_sheetu) {
print(i)
print(data[[i]] %>% head)
print(data[[i]] %>% dim)
}
data[[4]] <- data[[4]][,-13] # remove aggregate column nebo co to je
inf_cpm     <- data[[3]] %>% t %>% unlist %>% as.vector
inf_cpm     <- ts(inf_cpm, frequency = 12, start = c(1997, 1))  # inf, corresponding preceeding month
gt <- read.csv("search_trends.csv", row.names = 1)
gt %>% head
gt%>% dim
start <- rownames(gt)[1]
rok   <- as.numeric(substr(start, 1, 4))
mesic <- as.numeric(substr(start, 6, 7))
start <- c(rok, mesic)
print(start)
end   <- c(2022, 4)
gt_inf   <- ts(gt$inflace, frequency = 12, start = start)
gt_inf_s <- gt_inf
plot(gt_inf)
inf_cpm
plot(inf_cpm)
inf_cpm
plot(inf_cpm)
s_inf_cpm <- decompose(inf_cpm, "multiplicative")$random
plot(s_gt_inf_s)
plot(s_inf_cpm)
s_gt_inf <- decompose(gt_inf, "multiplicative")$random
plot(s_gt_inf)
gt_inf_s <- s_gt_inf
gt_inf_s
s_gt_inf_s <- ts(s_gt_inf, frequency = 12, start = c(rok, mesic + 1))
s_gt_inf_s
s_inf_cpm
s_inf_cpm_s <- ts(s_inf_cpm, frequency = 12, start = c(rok, mesic + 1))
s_inf_cpm_s
s_inf_cpm
s_inf_cpm_s <- ts(s_inf_cpm, frequency = 12, start = c(rok, mesic + 1), end = end)
s_inf_cpm_s
s_inf_cpm
s_inf_cpm_s <- ts(s_inf_cpm, frequency = 12, start = c(rok, mesic + 1), end = end)
s_gt_inf_s <- ts(s_gt_inf, frequency = 12, start = c(rok, mesic + 1))
length(s_inf_cpm_s)
length(s_gt_inf_s)
s_gt_inf_s
s_gt_inf_s <- s_gt_inf_s / mean(s_gt_inf_s) * mean(s_inf_cpm_s)
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 1)
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 2)
s_gt_inf_s
s_gt_inf_s <- ts(s_gt_inf, frequency = 12, start = c(rok, mesic + 1))
s_gt_inf_s
?mean
s_gt_inf_s <- s_gt_inf_s / mean(s_gt_inf_s, na.rm = TRUE) * mean(s_inf_cpm_s, na.rm = TRUE)
s_gt_inf_s
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 1)
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 2)
s_inf_cpm_s
s_gt_inf_s
plot(s_gt_inf_s)
plot(s_inf_cpm_s)
plot(s_gt_inf_s)
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 1)
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 2)
length(s_inf_cpm_s)
length(s_gt_inf_s)
# Load the necessary packages
library(forecast)
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- Arima(ts_real_inf, order = c(1,1,0), xreg = as.matrix(data.frame(ts_real_inf, s_gt_inf = ts_gt_inf)[, "s_gt_inf"]))
s_inf_cpm_s
s_gt_inf_s
s_gt_inf_s <- ts(s_gt_inf, frequency = 12, start = c(rok, mesic + 1), end = end)
length(s_inf_cpm_s)
length(s_gt_inf_s)
s_gt_inf_s <- s_gt_inf_s / mean(s_gt_inf_s, na.rm = TRUE) * mean(s_inf_cpm_s, na.rm = TRUE)
s_inf_cpm_s
s_gt_inf_s
plot(s_inf_cpm_s)
plot(s_gt_inf_s)
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 1)
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 2)
# Load the necessary packages
library(forecast)
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- Arima(ts_real_inf, order = c(1,1,0), xreg = as.matrix(data.frame(ts_real_inf, s_gt_inf = ts_gt_inf)[, "s_gt_inf"]))
# Generate the forecasted values for the next 12 months
forecast_data <- forecast(arima_model, xreg = as.matrix(data.frame(ts_real_inf, s_gt_inf = ts_gt_inf)[, "s_gt_inf"]), h = 12)
# Plot the actual and forecasted values
plot(forecast_data, main = "ARIMA(1,1,0) Forecast for Inflation",
xlab = "Time", ylab = "Real Inflation")
lines(ts_real_inf, col = "blue")
legend("topleft", legend = c("Actual", "Forecast"), lty = c(1,1), col = c("blue", "black"))
######################################################################################################
# Load the necessary packages
library(forecast)
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- Arima(ts_real_inf, order = c(1,1,0), xreg = ts_gt_inf)
# Generate the forecasted values for the next 12 months
forecast_data <- forecast.Arima(arima_model, xreg = ts_gt_inf, h = 12)
# Plot the actual and forecasted values
plot(forecast_data, main = "ARIMA(1,1,0) Forecast for Inflation",
xlab = "Time", ylab = "Real Inflation")
# Generate the forecasted values for the next 12 months
forecast_data <- forecast::Arima(arima_model, xreg = ts_gt_inf, h = 12)
# Plot the actual and forecasted values
plot(forecast_data, main = "ARIMA(1,1,0) Forecast for Inflation",
xlab = "Time", ylab = "Real Inflation")
lines(ts_real_inf, col = "blue")
# Fit the ARIMA(1,1,0) model to the data
arima_model <- Arima(ts_real_inf, order = c(1,1,0), xreg = ts_gt_inf)
summary(arima_model)
# Generate the forecasted values for the next 12 months
forecast_data <- forecast::Arima(arima_model, xreg = ts_gt_inf, h = 12)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- Arima(ts_real_inf, order = c(1,1,0), xreg = ts_gt_inf)
summary(arima_model)
# Generate the forecasted values for the next 12 months
forecast_data <- forecast::Arima(arima_model, xreg = ts_gt_inf, h = 12)
# Generate the forecasted values for the next 12 months
forecast_data <- forecast::Arima(arima_model, xreg = ts_gt_inf)
# Load the necessary packages
library(forecast)
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_real_inf, order = c(1,1,0), xreg = ts_gt_inf)
# Generate the forecasted values for the next 12 months
forecast_data <- forecast::forecast.Arima(arima_model, xreg = ts_gt_inf, h = 12)
# Generate the forecasted values for the next 12 months
forecast_data <- forecast::Arima(arima_model, xreg = ts_gt_inf, h = 12)
# Generate the forecasted values for the next 12 months
forecast_data <- forecast::Arima(arima_model, xreg = ts_gt_inf)
?forecast::Arima
?forecast.Arima
# Generate the forecasted values for the next 12 months
forecast_data <- forecast::forecast.Arima(arima_model, xreg = ts_gt_inf)
# Generate the forecasted values for the next 12 months
forecast_data <- forecast.Arima(arima_model, xreg = ts_gt_inf)
?forecast.Arima
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_real_inf, order = c(1,1,0), xreg = ts_gt_inf)
# Generate the forecasted values for the next 12 months
forecast_data <- forecast::forecast.Arima(arima_model, xreg = ts_gt_inf, h = 12)
# Generate the forecasted values for the next 12 months
forecast_data <- forecast.Arima(arima_model, xreg = ts_gt_inf, h = 12)
# Generate the forecasted values for the next 12 months
forecast_data <- forecast.Arima(arima_model, xreg = ts_gt_inf, h = 12)
# Generate the forecasted values for the next 12 months
forecast_data <- forecast::forecast(arima_model, xreg = ts_gt_inf, h = 12)
# Load the necessary packages
library(forecast)
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_real_inf, order = c(1,1,0), xreg = ts_gt_inf)
# Generate the forecasted values for the next 12 months
forecast_data <- forecast::forecast(arima_model, xreg = ts_gt_inf, h = 12)
# Plot the actual and forecasted values
plot(forecast_data, main = "ARIMA(1,1,0) Forecast for Inflation",
xlab = "Time", ylab = "Real Inflation")
lines(ts_real_inf, col = "blue")
legend("topleft", legend = c("Actual", "Forecast"), lty = c(1,1), col = c("blue", "black"))
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_real_inf, order = c(1,1,0), xreg = ts_gt_inf)
# Generate the fitted values
fitted_values <- arima_model$fitted
# Plot the actual and fitted values
plot(ts_real_inf, main = "ARIMA(1,1,0) Fitted Values for Inflation",
xlab = "Time", ylab = "Real Inflation")
lines(fitted_values, col = "red")
legend("topleft", legend = c("Actual", "Fitted"), lty = c(1,1), col = c("blue", "red"))
legend("topleft", legend = c("Actual", "Fitted"), lty = c(1,1), col = c("black", "red"))
summary(arima_model)
