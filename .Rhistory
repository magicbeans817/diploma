plot(ts_deseasonalized, main = "Deseasonalized Time Series")
######################################################################################################
# Subsetting, tests and adjustment of GT
s_inf_cpm_s <- window(ts_deseasonalized, frequency = 12, start = c(rok, mesic), end = end)
for (i in 1:ncol(gt_dss)) {
# ADF Test
adf_test <- adf.test(gt_dss[,i])
# Ljung-Box Test
lb_test <- Box.test(gt_dss[,i], lag = 12, type = "Ljung-Box")
# Append results to testy dataframe
testy <- rbind(testy, data.frame(time_interval = rocnik,
column_name = as.character(colnames(gt_dss)[i]),
adf_p_value = adf_test$p.value,
ljung_box_p_value = lb_test$p.value))
}
######################################################################################################
# PCA
pca <- prcomp(gt_dss, scale. = TRUE)
print(pca)
if (rocnik == 2){
pca_2022 <- pca
}
# Print PCA results (eigenvalues, eigenvectors, and standard deviations)
debug_print(pca)
index <- 0
for (i in 1:length(pca$sdev)) {
debug_print(i)
if (pca$sdev[i] > 1){
index <- index + 1
}
}
gt_dss <- cbind(gt_dss, pca$x[,c(1:index)])
# granger
for (i in 1:ncol(gt_dss)) {
x <- ts(gt_dss[, i], start = start, frequency = 12)
for (j in 1:12) {
y <- lmtest::grangertest(s_inf_cpm_s, x, order = j)
debug_print(y)
debug_print(colnames(gt_dss)[i])
granger <- rbind(granger, data.frame(time_interval = rocnik,
column_name = as.character(colnames(gt_dss)[i]),
n_lags = j,
granger_p_value = y$`Pr(>F)`))
}
}
######################################################################################################
# Arima
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ar <- 1
d  <- 1
ma <- 1 #jednicka idealni
# Srovnani s arimou bez external regresoru
arima_model <- forecast::Arima(ts_real_inf, order = c(ar,d,ma))
ssm <- matrix(c("originalni model", NA, arima_model$aic, arima_model$aicc, arima_model$bic, ar, d, ma, 0, "lag", "Vojta", "je", "debil",
"mae", "mse", "rmse", "b_mae", "b_mse", "b_rmse"), nrow = 1, ncol = length(jmena_sloupecku))
colnames(ssm) <- jmena_sloupecku
pocet_ss <- 0
opposite_lag <- function(x, k) {
c(tail(x, -k), rep(NA, k))
}
# Remove the last observation from the data as well
ts_real_inf_2 <- ts_real_inf[-length(ts_real_inf)]
ts_real_inf_2 <- ts(ts_real_inf_2, start = start, frequency = 12)
ts_real_inf_3 <- ts_real_inf[-1]
ts_real_inf_3 <- ts(ts_real_inf_3, start = c(start[1], (start[2] + 1)), frequency = 12)
# Plot ACF
acf(ts_real_inf, main = paste("ACF - Inflation, (2004 -", end[1],")"))
# Plot PACF
pacf(ts_real_inf, main = paste("PACF - Inflation, (2004 -", end[1],")"))
cifry <- 9
######################################################################################################
for (i in 1:ncol(gt_dss)) {
print(colnames(gt_dss)[i])
for (d in 0:1) {
for (ma in 1:3) {
for (ar in 1:3) {
debug_print(i)
regresor <- ts(data = gt_dss[,i], start = c(2004, 1), end = end, frequency = 12)
regresor <- regresor / regresor[1] * ts_real_inf[1]
#print(regresor)
for (promenna in c("regresor","delay", "posun_vpred")) {
rozeznani_do_tabulky <- promenna
if (promenna == "regresor") {
arima_model <- try(forecast::Arima(ts_real_inf, order = c(ar,d,ma), xreg = regresor))
} else if(promenna == "delay"){
ext_regressor <- regresor
if(bum == 1){
#future_values <- opposite_lag(ext_regressor, 1)
posun <- 1
future_values <- stats::lag(ext_regressor, posun)
ext_regressors <- ts(future_values[-(1:posun)], start = c(start[1], (start[2])), frequency = 12)
#ext_regressors <- ts(regresor, start = c(start[1], (start[2]+1)))
arima_model <- try(forecast::Arima(ts_real_inf_3, order = c(ar,d,ma), xreg = ext_regressors))
} else {
ext_regressor <- as.vector(ext_regressor)
ext_regressor <- lag(ext_regressor, posun)
ext_regressor <- ts(ext_regressor, start = c(start[1], (start[2])), frequency = 12)
arima_model <- try(forecast::Arima(ts_real_inf, order = c(ar,d,ma), xreg = ext_regressor))
}
#print(ext_regressors)
#print(ts_real_inf_3)
#print("Konec")
} else if(promenna == "posun_vpred") {
ext_regressor <- regresor
if(bum == 1){
ext_regressor <- regresor
posun <- 1
future_values <- opposite_lag(ext_regressor, posun)
# Remove the last row, as it contains NA for future_values
ext_regressors <- ts(future_values[-length(future_values)], start = start, frequency = 12) #ext_regressors[-nrow(ext_regressors), ]
arima_model <- try(forecast::Arima(ts_real_inf_2, order = c(ar,d,ma), xreg = ext_regressors))
} else {
ts_real_inf_4 <- ts_real_inf
ext_regressor <- opposite_lag(ext_regressor, posun)
ext_regressor <- ts(ext_regressor, start = c(start[1], (start[2])), frequency = 12)
arima_model <- try(forecast::Arima(ts_real_inf_4, order = c(ar,d,ma), xreg = ext_regressor))
}
}
# Pro pripad multiple regression
# Combine the original external regressor and its future values into a matrix
#ext_regressors <- cbind(ext_regressor, future_values)
#colnames(ext_regressors) <- c("ext_regressor", "future_values")
#
# Check if there was an error
if (!inherits(arima_model, "try-error")) {
# Store the ARIMA model in the list if no error occurred
} else {
# Print a message and continue to the next iteration if an error occurred
cat("Error encountered for ARIMA(", colnames(gt_dss)[i]) # . Skipping this model.\n")
next  # Continue to the next iteration
}
se_coef <- sqrt(diag(arima_model$var.coef))["xreg"]
co <- arima_model$coef["xreg"]
ss <- co/ se_coef
if (is.nan(se_coef) == TRUE | is.nan(co) == TRUE) {
p_value <- 1
} else {
p_value <- round(2 * (1 - pnorm(abs(ss))), digits = 4)
}
if (p_value < 0.1 ) {
debug_print("p_value")
debug_print(p_value)
pocet_ss <- pocet_ss + 1
debug_print(i)
b <- colnames(gt_dss)[i]
cat(red(b))
moje_aic <- round(arima_model$aic, digits = cifry)
moje_aicc <- round(arima_model$aicc, digits = cifry)
moje_bic <- round(arima_model$bic, digits = cifry)
# mae, mse, rmse
fitted_values <- fitted(arima_model)
if(promenna == "posun_vpred"){
residuals <- ts_real_inf_4 - fitted_values
} else {
residuals <- ts_real_inf - fitted_values
}
residuals <- na.omit(residuals)
# Mean Absolute Error (MAE)
mae <- mean(abs(residuals))
mae <- round(mae, digits = cifry)
# Mean Squared Error (MSE)
mse <- mean(residuals^2)
mse <- round(mse, digits = cifry)
# Root Mean Squared Error (RMSE)
rmse <- sqrt(mse)
rmse <- round(rmse, digits = cifry)
if (rozeznani_do_tabulky == "regresor") {
srovnavaci_model <- try(forecast::Arima(ts_real_inf, order = c(ar,d,ma)))
srovnavaci_vektor <- c(as.character(ar), as.character(d), as.character(ma), srovnavaci_model$aic, srovnavaci_model$aicc, srovnavaci_model$bic)
originalni_modely <- rbind(originalni_modely,srovnavaci_vektor)
} else if (rozeznani_do_tabulky == "delay") {
srovnavaci_model <- try(forecast::Arima(ts_real_inf, order = c(ar,d,ma)))
srovnavaci_vektor <- c(as.character(ar), as.character(d), as.character(ma), srovnavaci_model$aic, srovnavaci_model$aicc, srovnavaci_model$bic)
originalni_modely <- rbind(originalni_modely, srovnavaci_vektor)
} else if (rozeznani_do_tabulky == "posun_vpred") {
srovnavaci_model <- try(forecast::Arima(ts_real_inf_4, order = c(ar,d,ma)))
srovnavaci_vektor <- c(as.character(ar), as.character(d), as.character(ma), srovnavaci_model$aic, srovnavaci_model$aicc, srovnavaci_model$bic)
originalni_modely <- rbind(originalni_modely, srovnavaci_vektor)
}
# benchmark mae, mse, rmse
fitted_values <- fitted(srovnavaci_model)
if(promenna == "posun_vpred"){
residuals <- ts_real_inf_4 - fitted_values
} else {
residuals <- ts_real_inf - fitted_values
}
# Mean Absolute Error (MAE)
b_mae <- mean(abs(residuals))
b_mae <- round(b_mae, digits = cifry)
# Mean Squared Error (MSE)
b_mse <- mean(residuals^2)
b_mse <- round(b_mse, digits = cifry)
# Root Mean Squared Error (RMSE)
b_rmse <- sqrt(b_mse)
b_rmse <- round(b_rmse, digits = cifry)
informace <- c(as.character(colnames(gt_dss)[i]), p_value, moje_aic, moje_aicc, moje_bic, ar, d, ma, co,rozeznani_do_tabulky,
srovnavaci_model$aic, srovnavaci_model$aicc, srovnavaci_model$bic, mae, mse, rmse, b_mae, b_mse, b_rmse)
ssm <- rbind(ssm, informace)
rownames(ssm)[nrow(ssm)] <- paste(as.character(end[1]),"/",as.character(end[2]),"/",as.character(i))
debil <- c(ar, d, ma)
#grafika
# Generate the fitted values
fitted_values <- arima_model$fitted
if (DEBUG == TRUE) {
if (rozeznani_do_tabulky == "regresor"){
barvicka <- "blue"
} else {
barvicka <- "red"
}
# Plot the actual and fitted values
plot(ts_real_inf, main = paste("ARIMA(",ar,",",d,",",ma,") Fitted Values for Inflation"),
xlab = "Time", ylab = b)
lines(fitted_values, col = barvicka)
legend("topleft",
legend = c("Actual", "Fitted",
paste("p-value =", as.character(p_value)),
paste("b =", as.character(b)),
paste("end =", as.character(end)),
paste("AIC =", as.character(moje_aic)),
paste("AICc =", as.character(moje_aicc)),
paste("BIC =", as.character(moje_bic))),
lty = c(1, 1),
col = c("black", barvicka))
}
} else {
debug_print(colnames(gt_dss)[i])
}
}
}
}
}
}
print(paste("Pocet statisticky signifikantnich promennych je", pocet_ss))
print(ssm)
tabulka_arima_modelu <- rbind(tabulka_arima_modelu, ssm)
}
} else{
#write.csv(tabulka_arima_modelu, "tabulka_arima_modelu.csv", row.names = FALSE)
# Loading the dataframe with rownames
tabulka_arima_modelu <- read.csv("tabulka_arima_modelu.csv", row.names = 1)
write.csv(gt_dss_a, "gt_dss.csv", row.names = TRUE)
gt_dss <- read.csv("gt_dss.csv", row.names = 1)
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_real_inf_3 <- ts_real_inf[-1]
ts_real_inf_3 <- ts(ts_real_inf_3, start = c(start[1], (start[2] + 1)), frequency = 12)
}
granger <- na.omit(granger)
granger_sub <- granger %>% filter(granger_p_value < 0.05)
granger_sub %>% count(column_name)
tabulka_arima_modelu
nrow(tabulka_arima_modelu)
tabulka_arima_modelu_zaloha <- tabulka_arima_modelu
tabulka_arima_modelu <- tabulka_arima_modelu_zaloha
print(tabulka_arima_modelu)
for (i in 1:nrow(tabulka_arima_modelu)) {
print(i)
if (tabulka_arima_modelu[i, "lag"] == "lag") {
tabulka_arima_modelu[i,] <- NA
}
}
tabulka_arima_modelu <- tabulka_arima_modelu[complete.cases(tabulka_arima_modelu), ]
tabulka_arima_modelu <- tabulka_arima_modelu %>%
mutate(across(c("AIC", "AICc","BIC", "sAIC", "sAICc","sBIC"), as.numeric))
tabulka_arima_modelu$model <-  tabulka_arima_modelu$AIC + tabulka_arima_modelu$AICc + tabulka_arima_modelu$BIC
tabulka_arima_modelu$benchmark <- tabulka_arima_modelu$sAIC + tabulka_arima_modelu$sAICc + tabulka_arima_modelu$sBIC
tabulka_arima_modelu$vyslednice <- tabulka_arima_modelu$model - tabulka_arima_modelu$benchmark
tabulka_arima_modelu$model_bez_bic <-  tabulka_arima_modelu$AIC + tabulka_arima_modelu$AICc
tabulka_arima_modelu$benchmark_bez_bic <- tabulka_arima_modelu$sAIC + tabulka_arima_modelu$sAICc
tabulka_arima_modelu$vyslednice_bez_bic <- tabulka_arima_modelu$model_bez_bic - tabulka_arima_modelu$benchmark_bez_bic
#View(tabulka_arima_modelu)
tabulka_arima_modelu <- tibble::rownames_to_column(tabulka_arima_modelu, var = "row_names")
tabulka_arima_modelu$row_names <- gsub("X", "", tabulka_arima_modelu$row_names)
# Replace "..." with "/" in the row_names column
tabulka_arima_modelu$row_names <- gsub("\\.\\.\\.", "/", tabulka_arima_modelu$row_names)
tabulka_arima_modelu$row_names <- gsub("(/[^/]*)/.*", "\\1", tabulka_arima_modelu$row_names)
# Print the updated dataframe
print(tabulka_arima_modelu)
min_rows <- tabulka_arima_modelu %>%
group_by(row_names) %>%
filter(model == min(model) | benchmark == min(benchmark))
# Print the resulting dataframe
print(min_rows)
min_rows_bez_bic <- tabulka_arima_modelu %>%
group_by(row_names) %>%
filter(model_bez_bic == min(model_bez_bic) | benchmark_bez_bic == min(benchmark_bez_bic))
# Print the resulting dataframe
print(min_rows_bez_bic)
min_rows_delay <- tabulka_arima_modelu %>% filter(lag == "delay")
min_rows_delay
View(tabulka_arima_modelu)
View(min_rows)
View(min_rows_delay)
result <- tabulka_arima_modelu %>%
group_by(row_names, promenna) %>%
filter(benchmark == min(benchmark) | model == min(model)) %>%
ungroup()
# sejvni env
View(results)
result <- tabulka_arima_modelu %>%
group_by(row_names, promenna) %>%
filter(benchmark == min(benchmark) | model == min(model)) %>%
ungroup()
View(results)
View(result)
sum(result[, vyslednice > 0])
result[, "vyslednice"]
sum(result[,vyslednice]> 0)
sum(result[,"vyslednice"]> 0)
print(5,8)
sum(result[, "rmse"]-result[, "b_rmse"])
result[, "rmse"]-result[, "b_rmse"]
sum(result$rmse-result$b_rmse)
is.numeric(result$rmse)
nrow(result)
result <- result %>%
mutate_at(vars(-row_names, -promenna, -lag), as.numeric)
sum(result[,"vyslednice"]> 0)
sum(result$rmse-result$b_rmse)
sum((result$rmse-result$b_rmse)>0)
sum((result$mae-result$mae)>0)
sum((result$mae-result$b_mae)>0)
?auto.arima
auto.arima(ts_real_inf)
ts_real_inf
benchmark_2023 <- forecast::Arima(ts_real_inf, order = c(1,1,1))
residuals_2023 <- ts_real_inf - fitted(benchmark_2023)
mae_2023 <- mean(abs(residuals_2023))
mae_2023 <- round(mae_2023, digits = cifra)
cifra <- 9
mae_2023 <- round(mae_2023, digits = cifra)
mse_2023 <- mean(residuals_2023^2)
mse_2023 <- round(mse_2023, digits = cifra)
rmse_2023 <- sqrt(mse_2023)
rmse_2023 <- round(rmse_2023, digits = cifra)
mae_2023
benchmark_2023 <- forecast::Arima(ts(ts_real_inf[1:(length(ts_real_inf) - 12), start = start, frequency = 12]), order = c(1,1,1))
benchmark_2023 <- forecast::Arima(ts(ts_real_inf[1:(length(ts_real_inf) - 12)], start = start, frequency = 12), order = c(1,1,1))
residuals_2023 <- ts_real_inf - fitted(benchmark_2023)
mae_2023 <- mean(abs(residuals_2023))
mae_2023 <- round(mae_2023, digits = cifra)
mse_2023 <- mean(residuals_2023^2)
mse_2023 <- round(mse_2023, digits = cifra)
rmse_2023 <- sqrt(mse_2023)
rmse_2023 <- round(rmse_2023, digits = cifra)
mae_2023
residuals_2022 <- ts_real_inf - fitted(benchmark_2022)
benchmark_2020 <- forecast::Arima(ts(ts_real_inf[1:(length(ts_real_inf) - 36)], start = start, frequency = 12), order = c(1,1,1))
residuals_2020 <- ts_real_inf[1:(length(ts_real_inf) - 36)] - fitted(benchmark_2020)
mae_2020 <- mean(abs(residuals_2020))
mae_2020 <- round(mae_2020, digits = cifra)
mse_2020 <- mean(residuals_2020^2)
mse_2020 <- round(mse_2020, digits = cifra)
rmse_2020 <- sqrt(mse_2020)
rmse_2020 <- round(rmse_2020, digits = cifra)
benchmark_2022 <- forecast::Arima(ts(ts_real_inf[1:(length(ts_real_inf) - 12)], start = start, frequency = 12), order = c(1,1,1))
residuals_2022 <- ts_real_inf[1:(length(ts_real_inf) - 12)] - fitted(benchmark_2022)
mae_2022 <- mean(abs(residuals_2022))
mae_2022 <- round(mae_2022, digits = cifra)
mse_2022 <- mean(residuals_2022^2)
mse_2022 <- round(mse_2022, digits = cifra)
rmse_2022 <- sqrt(mse_2022)
rmse_2022 <- round(rmse_2022, digits = cifra)
benchmark_2023 <- forecast::Arima(ts_real_inf, order = c(1,1,1))
residuals_2023 <- ts_real_inf - fitted(benchmark_2023)
mae_2023 <- mean(abs(residuals_2023))
mae_2023 <- round(mae_2023, digits = cifra)
mse_2023 <- mean(residuals_2023^2)
mse_2023 <- round(mse_2023, digits = cifra)
rmse_2023 <- sqrt(mse_2023)
rmse_2023 <- round(rmse_2023, digits = cifra)
uga <- ts(ts_real_inf[1:(length(ts_real_inf) - 36)], start = start, frequency = 12)
benchmark_2020 <- forecast::Arima(uga, order = c(1,1,1))
residuals_2020 <- uga - fitted(benchmark_2020)
mae_2020 <- mean(abs(residuals_2020))
mae_2020 <- round(mae_2020, digits = cifra)
mse_2020 <- mean(residuals_2020^2)
mse_2020 <- round(mse_2020, digits = cifra)
rmse_2020 <- sqrt(mse_2020)
rmse_2020 <- round(rmse_2020, digits = cifra)
buga <- ts(ts_real_inf[1:(length(ts_real_inf) - 12)], start = start, frequency = 12)
benchmark_2022 <- forecast::Arima(buga, order = c(1,1,1))
residuals_2022 <- buga - fitted(benchmark_2022)
mae_2022 <- mean(abs(residuals_2022))
mae_2022 <- round(mae_2022, digits = cifra)
mse_2022 <- mean(residuals_2022^2)
mse_2022 <- round(mse_2022, digits = cifra)
rmse_2022 <- sqrt(mse_2022)
rmse_2022 <- round(rmse_2022, digits = cifra)
benchmark_2023 <- forecast::Arima(ts_real_inf, order = c(1,1,1))
residuals_2023 <- ts_real_inf - fitted(benchmark_2023)
mae_2023 <- mean(abs(residuals_2023))
mae_2023 <- round(mae_2023, digits = cifra)
mse_2023 <- mean(residuals_2023^2)
mse_2023 <- round(mse_2023, digits = cifra)
rmse_2023 <- sqrt(mse_2023)
rmse_2023 <- round(rmse_2023, digits = cifra)
forecast::auto.arima(uga)
forecast::auto.arima(ts_real_inf)
b_2020 <- c(benchmark_2020$aic, benchmark_2020$aicc, benchmark_2020$bic, mae_2020, mse_2020, rmse_2020)
b_2020 <- c(benchmark_2020$aic, benchmark_2020$aicc, benchmark_2020$bic, mae_2020, mse_2020, rmse_2020)
b_2022 <- c(benchmark_2022$aic, benchmark_2022$aicc, benchmark_2022$bic, mae_2022, mse_2022, rmse_2022)
b_2023 <- c(benchmark_2023$aic, benchmark_2023$aicc, benchmark_2023$bic, mae_2023, mse_2023, rmse_2023)
three_key_benchmarks <- matrix(c(b_2020, b_2022, b_2023), nrow = 3, ncol = length(b_2020), byrow = TRUE)
three_key_benchmarks
benchmark_2020 <- forecast::Arima(uga, order = c(1,1,0))
forecast::auto.arima(uga)
residuals_2020 <- uga - fitted(benchmark_2020)
mae_2020 <- mean(abs(residuals_2020))
mae_2020 <- round(mae_2020, digits = cifra)
mse_2020 <- mean(residuals_2020^2)
mse_2020 <- round(mse_2020, digits = cifra)
rmse_2020 <- sqrt(mse_2020)
rmse_2020 <- round(rmse_2020, digits = cifra)
buga <- ts(ts_real_inf[1:(length(ts_real_inf) - 12)], start = start, frequency = 12)
benchmark_2022 <- forecast::Arima(buga, order = c(1,1,1))
forecast::auto.arima(buga)
residuals_2022 <- buga - fitted(benchmark_2022)
mae_2022 <- mean(abs(residuals_2022))
mae_2022 <- round(mae_2022, digits = cifra)
mse_2022 <- mean(residuals_2022^2)
mse_2022 <- round(mse_2022, digits = cifra)
rmse_2022 <- sqrt(mse_2022)
rmse_2022 <- round(rmse_2022, digits = cifra)
benchmark_2023 <- forecast::Arima(ts_real_inf, order = c(1,1,1))
forecast::auto.arima(ts_real_inf)
residuals_2023 <- ts_real_inf - fitted(benchmark_2023)
mae_2023 <- mean(abs(residuals_2023))
mae_2023 <- round(mae_2023, digits = cifra)
mse_2023 <- mean(residuals_2023^2)
mse_2023 <- round(mse_2023, digits = cifra)
rmse_2023 <- sqrt(mse_2023)
rmse_2023 <- round(rmse_2023, digits = cifra)
b_2020 <- c(benchmark_2020$aic, benchmark_2020$aicc, benchmark_2020$bic, mae_2020, mse_2020, rmse_2020)
b_2022 <- c(benchmark_2022$aic, benchmark_2022$aicc, benchmark_2022$bic, mae_2022, mse_2022, rmse_2022)
b_2023 <- c(benchmark_2023$aic, benchmark_2023$aicc, benchmark_2023$bic, mae_2023, mse_2023, rmse_2023)
three_key_benchmarks <- matrix(c(b_2020, b_2022, b_2023), nrow = 3, ncol = length(b_2020), byrow = TRUE)
three_key_benchmarks
benchmark_2020 <- forecast::Arima(uga, order = c(1,0,0))
forecast::auto.arima(uga)
residuals_2020 <- uga - fitted(benchmark_2020)
mae_2020 <- mean(abs(residuals_2020))
mae_2020 <- round(mae_2020, digits = cifra)
mse_2020 <- mean(residuals_2020^2)
mse_2020 <- round(mse_2020, digits = cifra)
rmse_2020 <- sqrt(mse_2020)
rmse_2020 <- round(rmse_2020, digits = cifra)
b_2020 <- c(benchmark_2020$aic, benchmark_2020$aicc, benchmark_2020$bic, mae_2020, mse_2020, rmse_2020)
b_2022 <- c(benchmark_2022$aic, benchmark_2022$aicc, benchmark_2022$bic, mae_2022, mse_2022, rmse_2022)
b_2023 <- c(benchmark_2023$aic, benchmark_2023$aicc, benchmark_2023$bic, mae_2023, mse_2023, rmse_2023)
three_key_benchmarks <- matrix(c(b_2020, b_2022, b_2023), nrow = 3, ncol = length(b_2020), byrow = TRUE)
three_key_benchmarks
forecast::auto.arima(uga)
forecast::auto.arima(ts_real_inf)
forecast::auto.arima(buga)
adf.test(buga)
adf.test(ts_real_inf)
benchmark_2022 <- forecast::Arima(buga, order = c(1,0,1))
forecast::auto.arima(buga)
residuals_2022 <- buga - fitted(benchmark_2022)
mae_2022 <- mean(abs(residuals_2022))
mae_2022 <- round(mae_2022, digits = cifra)
mse_2022 <- mean(residuals_2022^2)
mse_2022 <- round(mse_2022, digits = cifra)
rmse_2022 <- sqrt(mse_2022)
b_2022 <- c(benchmark_2022$aic, benchmark_2022$aicc, benchmark_2022$bic, mae_2022, mse_2022, rmse_2022)
b_2023 <- c(benchmark_2023$aic, benchmark_2023$aicc, benchmark_2023$bic, mae_2023, mse_2023, rmse_2023)
three_key_benchmarks <- matrix(c(b_2020, b_2022, b_2023), nrow = 3, ncol = length(b_2020), byrow = TRUE)
three_key_benchmarks
benchmark_2022 <- forecast::Arima(buga, order = c(2,0,1))
residuals_2022 <- buga - fitted(benchmark_2022)
mae_2022 <- mean(abs(residuals_2022))
mae_2022 <- round(mae_2022, digits = cifra)
mse_2022 <- mean(residuals_2022^2)
mse_2022 <- round(mse_2022, digits = cifra)
rmse_2022 <- sqrt(mse_2022)
rmse_2022 <- round(rmse_2022, digits = cifra)
b_2020 <- c(benchmark_2020$aic, benchmark_2020$aicc, benchmark_2020$bic, mae_2020, mse_2020, rmse_2020)
b_2022 <- c(benchmark_2022$aic, benchmark_2022$aicc, benchmark_2022$bic, mae_2022, mse_2022, rmse_2022)
b_2023 <- c(benchmark_2023$aic, benchmark_2023$aicc, benchmark_2023$bic, mae_2023, mse_2023, rmse_2023)
three_key_benchmarks <- matrix(c(b_2020, b_2022, b_2023), nrow = 3, ncol = length(b_2020), byrow = TRUE)
three_key_benchmarks
benchmark_2023 <- forecast::Arima(ts_real_inf, order = c(3,0,2))
forecast::auto.arima(ts_real_inf)
residuals_2023 <- ts_real_inf - fitted(benchmark_2023)
mae_2023 <- mean(abs(residuals_2023))
mae_2023 <- round(mae_2023, digits = cifra)
mse_2023 <- mean(residuals_2023^2)
mse_2023 <- round(mse_2023, digits = cifra)
rmse_2023 <- sqrt(mse_2023)
rmse_2023 <- round(rmse_2023, digits = cifra)
b_2020 <- c(benchmark_2020$aic, benchmark_2020$aicc, benchmark_2020$bic, mae_2020, mse_2020, rmse_2020)
b_2022 <- c(benchmark_2022$aic, benchmark_2022$aicc, benchmark_2022$bic, mae_2022, mse_2022, rmse_2022)
b_2023 <- c(benchmark_2023$aic, benchmark_2023$aicc, benchmark_2023$bic, mae_2023, mse_2023, rmse_2023)
three_key_benchmarks <- matrix(c(b_2020, b_2022, b_2023), nrow = 3, ncol = length(b_2020), byrow = TRUE)
three_key_benchmarks
og <- forecast::auto.arima(ts_real_inf)
# Extract fitted values
fitted_values <- fitted(og)
# Calculate residuals
residuals <- ts_real_inf - fitted_values
# Calculate MAE
mae <- mean(abs(residuals))
# Calculate MSE
mse <- mean(residuals^2)
# Calculate RMSE
rmse <- sqrt(mse)
# Print the results
cat("MAE:", mae, "\n")
cat("MSE:", mse, "\n")
cat("RMSE:", rmse, "\n")
View(three_key_benchmarks)
