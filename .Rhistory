} else {
osa_x <- "Starting window length"
}
if(predpoved == "rw"){
matplot(data_graf$iterace, data_graf[, meritka], type = "l", lty = line_types, ylim = c(0.0,1.4),
xlab = osa_x, ylab = "Value", col = colores, main = nazev_grafu_rw)
} else {
matplot(data_graf$iterace, data_graf[, meritka], type = "l", lty = line_types, ylim = c(0.0,1.4),
xlab = osa_x, ylab = "Value", col = colores, main = nazev_grafu_rw)
}
# Add a legend
legend("topleft", legend = colnames(data_graf[, meritka]), col = colores, lty = line_types, cex = 1)
}
for (predpoved in unique(tabulka_nej_model$rw)) {
if (predpoved == "rw") {
nazev_grafu_rw <- "Rolling window forecast"
} else {
nazev_grafu_rw <- "Expanding window forecast"
}
data_graf <- tabulka_nej_model %>% filter(rw == predpoved)
jmena_sloupcu <- colnames(data_graf)
data_graf <- cbind(data_graf %>% filter(ext == "ext"), data_graf %>% filter(ext == "bez"))
testy <- data_graf[,c(1,4,5,6,10,11,12)]
soucet_m <- testy$mae + testy$mse + testy$rmse
soucet_b <- testy$mae.1 + testy$mse.1 + testy$rmse.1
my_vector <- soucet_m
smallest_values <- sort(my_vector)[1:3]
# Get the indices of the smallest values
indices <- which(my_vector %in% smallest_values)
print(predpoved)
print("3 nejlepsi settingy okna")
print(testy[indices,"iterace"])
print("jak casto nizsi? (%)")
print(sum(soucet_m < soucet_b)/length(soucet_b))
print("parove modely")
alternativa <- c("less")
t_mae <- t.test(testy$mae ,testy$mae.1 , alternative = alternativa, paired = TRUE)
print(t_mae)
t_mse <- t.test(testy$mse ,testy$mse.1 , alternative = alternativa, paired = TRUE)
print(t_mse)
t_rmse <- t.test(testy$rmse ,testy$rmse.1 , alternative = alternativa, paired = TRUE)
print(t_rmse)
print("NEparove modely")
t_mae <- t.test(testy$mae ,testy$mae.1 , alternative = alternativa)
print(t_mae)
t_mse <- t.test(testy$mse ,testy$mse.1 , alternative = alternativa)
print(t_mse)
t_rmse <- t.test(testy$rmse ,testy$rmse.1 , alternative = alternativa)
print(t_rmse)
}
load("~/Desktop/diploma/env_po_bubu_pc1.RData")
#sejvuju env
tabulka_nej_model <- as.data.frame(tabulka_nej_model)
tabulka_nej_model_z <- tabulka_nej_model
tabulka_nej_model <- tabulka_nej_model[-1,]
colnames(tabulka_nej_model) <- as.character(uga)
tabulka_nej_model
tabulka_nej_model$iterace <- as.numeric(tabulka_nej_model$iterace)
tabulka_nej_model$mae <- as.numeric(tabulka_nej_model$mae)
tabulka_nej_model$mse <- as.numeric(tabulka_nej_model$mse)
tabulka_nej_model$rmse <- as.numeric(tabulka_nej_model$rmse)
tabulka_nej_model
meritka <- c("mae","mse", "rmse")
par(mfrow = c(2, 2))
for (model in unique(tabulka_nej_model$ext)) {
for (predpoved in unique(tabulka_nej_model$rw)) {
data_graf <- tabulka_nej_model %>% filter(ext == model)
data_graf <- data_graf %>% filter(rw == predpoved)
if (model == "ext") {
nazev_grafu_ext <- "External regressor"
} else {
nazev_grafu_ext <- "Benchmark model"
}
if (predpoved == "rw") {
nazev_grafu_rw <- "Rolling window forecast"
} else {
nazev_grafu_rw <- "Expanding window forecast"
}
matplot(data_graf$iterace, data_graf[, meritka], type = "l", ylim = c(0.0,0.9),
xlab = "(Starting) Window length", ylab = "Value", main = c(paste(nazev_grafu_rw, " - ", nazev_grafu_ext)))
legend("topleft", legend = colnames(data_graf[, meritka]), col = 1:3, lty = 1, cex = 0.8)
}
}
line_types <- c(1, 1, 1, 2, 2, 2)
colores <- c("#3399FF", "#33CC66", "#FF0000", "#4DA6FF", "#66CC99", "#FF6666")#3399FF #33CC66
par(mfrow = c(1, 1))
for (predpoved in unique(tabulka_nej_model$rw)) {
if (predpoved == "rw") {
nazev_grafu_rw <- "Rolling window forecast"
} else {
nazev_grafu_rw <- "Expanding window forecast"
}
data_graf <- tabulka_nej_model %>% filter(rw == predpoved)
jmena_sloupcu <- colnames(data_graf)
print(predpoved)
data_graf <- cbind(data_graf %>% filter(ext == "ext"), data_graf %>% filter(ext == "bez"))
print(data_graf)
colnames(data_graf)[7:12] <- c("v1", "v2","v3", "mae - benchmark", "mse - benchmark", "rmse - benchmark")
meritka <- c("mae","mse", "rmse", "mae - benchmark", "mse - benchmark", "rmse - benchmark")
if(predpoved == "rw"){
osa_x <- "Window length"
} else {
osa_x <- "Starting window length"
}
if(predpoved == "rw"){
matplot(data_graf$iterace, data_graf[, meritka], type = "l", lty = line_types, ylim = c(0.0,1.4),
xlab = osa_x, ylab = "Value", col = colores, main = nazev_grafu_rw)
} else {
matplot(data_graf$iterace, data_graf[, meritka], type = "l", lty = line_types, ylim = c(0.0,1.4),
xlab = osa_x, ylab = "Value", col = colores, main = nazev_grafu_rw)
}
# Add a legend
legend("topleft", legend = colnames(data_graf[, meritka]), col = colores, lty = line_types, cex = 1)
}
for (predpoved in unique(tabulka_nej_model$rw)) {
if (predpoved == "rw") {
nazev_grafu_rw <- "Rolling window forecast"
} else {
nazev_grafu_rw <- "Expanding window forecast"
}
data_graf <- tabulka_nej_model %>% filter(rw == predpoved)
jmena_sloupcu <- colnames(data_graf)
data_graf <- cbind(data_graf %>% filter(ext == "ext"), data_graf %>% filter(ext == "bez"))
testy <- data_graf[,c(1,4,5,6,10,11,12)]
soucet_m <- testy$mae + testy$mse + testy$rmse
soucet_b <- testy$mae.1 + testy$mse.1 + testy$rmse.1
my_vector <- soucet_m
smallest_values <- sort(my_vector)[1:3]
# Get the indices of the smallest values
indices <- which(my_vector %in% smallest_values)
print(predpoved)
print("3 nejlepsi settingy okna")
print(testy[indices,"iterace"])
print("jak casto nizsi? (%)")
print(sum(soucet_m < soucet_b)/length(soucet_b))
print("parove modely")
alternativa <- c("less")
t_mae <- t.test(testy$mae ,testy$mae.1 , alternative = alternativa, paired = TRUE)
print(t_mae)
t_mse <- t.test(testy$mse ,testy$mse.1 , alternative = alternativa, paired = TRUE)
print(t_mse)
t_rmse <- t.test(testy$rmse ,testy$rmse.1 , alternative = alternativa, paired = TRUE)
print(t_rmse)
print("NEparove modely")
t_mae <- t.test(testy$mae ,testy$mae.1 , alternative = alternativa)
print(t_mae)
t_mse <- t.test(testy$mse ,testy$mse.1 , alternative = alternativa)
print(t_mse)
t_rmse <- t.test(testy$rmse ,testy$rmse.1 , alternative = alternativa)
print(t_rmse)
}
load("~/Desktop/diploma/env_po_bubu_cena.RData")
#sejvuju env
tabulka_nej_model <- as.data.frame(tabulka_nej_model)
tabulka_nej_model_z <- tabulka_nej_model
tabulka_nej_model <- tabulka_nej_model[-1,]
colnames(tabulka_nej_model) <- as.character(uga)
tabulka_nej_model
tabulka_nej_model$iterace <- as.numeric(tabulka_nej_model$iterace)
tabulka_nej_model$mae <- as.numeric(tabulka_nej_model$mae)
tabulka_nej_model$mse <- as.numeric(tabulka_nej_model$mse)
tabulka_nej_model$rmse <- as.numeric(tabulka_nej_model$rmse)
tabulka_nej_model
meritka <- c("mae","mse", "rmse")
par(mfrow = c(2, 2))
for (model in unique(tabulka_nej_model$ext)) {
for (predpoved in unique(tabulka_nej_model$rw)) {
data_graf <- tabulka_nej_model %>% filter(ext == model)
data_graf <- data_graf %>% filter(rw == predpoved)
if (model == "ext") {
nazev_grafu_ext <- "External regressor"
} else {
nazev_grafu_ext <- "Benchmark model"
}
if (predpoved == "rw") {
nazev_grafu_rw <- "Rolling window forecast"
} else {
nazev_grafu_rw <- "Expanding window forecast"
}
matplot(data_graf$iterace, data_graf[, meritka], type = "l", ylim = c(0.0,0.9),
xlab = "(Starting) Window length", ylab = "Value", main = c(paste(nazev_grafu_rw, " - ", nazev_grafu_ext)))
legend("topleft", legend = colnames(data_graf[, meritka]), col = 1:3, lty = 1, cex = 0.8)
}
}
line_types <- c(1, 1, 1, 2, 2, 2)
colores <- c("#3399FF", "#33CC66", "#FF0000", "#4DA6FF", "#66CC99", "#FF6666")#3399FF #33CC66
par(mfrow = c(1, 1))
for (predpoved in unique(tabulka_nej_model$rw)) {
if (predpoved == "rw") {
nazev_grafu_rw <- "Rolling window forecast"
} else {
nazev_grafu_rw <- "Expanding window forecast"
}
data_graf <- tabulka_nej_model %>% filter(rw == predpoved)
jmena_sloupcu <- colnames(data_graf)
print(predpoved)
data_graf <- cbind(data_graf %>% filter(ext == "ext"), data_graf %>% filter(ext == "bez"))
print(data_graf)
colnames(data_graf)[7:12] <- c("v1", "v2","v3", "mae - benchmark", "mse - benchmark", "rmse - benchmark")
meritka <- c("mae","mse", "rmse", "mae - benchmark", "mse - benchmark", "rmse - benchmark")
if(predpoved == "rw"){
osa_x <- "Window length"
} else {
osa_x <- "Starting window length"
}
if(predpoved == "rw"){
matplot(data_graf$iterace, data_graf[, meritka], type = "l", lty = line_types, ylim = c(0.0,1.4),
xlab = osa_x, ylab = "Value", col = colores, main = nazev_grafu_rw)
} else {
matplot(data_graf$iterace, data_graf[, meritka], type = "l", lty = line_types, ylim = c(0.0,1.4),
xlab = osa_x, ylab = "Value", col = colores, main = nazev_grafu_rw)
}
# Add a legend
legend("topleft", legend = colnames(data_graf[, meritka]), col = colores, lty = line_types, cex = 1)
}
for (predpoved in unique(tabulka_nej_model$rw)) {
if (predpoved == "rw") {
nazev_grafu_rw <- "Rolling window forecast"
} else {
nazev_grafu_rw <- "Expanding window forecast"
}
data_graf <- tabulka_nej_model %>% filter(rw == predpoved)
jmena_sloupcu <- colnames(data_graf)
data_graf <- cbind(data_graf %>% filter(ext == "ext"), data_graf %>% filter(ext == "bez"))
testy <- data_graf[,c(1,4,5,6,10,11,12)]
soucet_m <- testy$mae + testy$mse + testy$rmse
soucet_b <- testy$mae.1 + testy$mse.1 + testy$rmse.1
my_vector <- soucet_m
smallest_values <- sort(my_vector)[1:3]
# Get the indices of the smallest values
indices <- which(my_vector %in% smallest_values)
print(predpoved)
print("3 nejlepsi settingy okna")
print(testy[indices,"iterace"])
print("jak casto nizsi? (%)")
print(sum(soucet_m < soucet_b)/length(soucet_b))
print("parove modely")
alternativa <- c("less")
t_mae <- t.test(testy$mae ,testy$mae.1 , alternative = alternativa, paired = TRUE)
print(t_mae)
t_mse <- t.test(testy$mse ,testy$mse.1 , alternative = alternativa, paired = TRUE)
print(t_mse)
t_rmse <- t.test(testy$rmse ,testy$rmse.1 , alternative = alternativa, paired = TRUE)
print(t_rmse)
print("NEparove modely")
t_mae <- t.test(testy$mae ,testy$mae.1 , alternative = alternativa)
print(t_mae)
t_mse <- t.test(testy$mse ,testy$mse.1 , alternative = alternativa)
print(t_mse)
t_rmse <- t.test(testy$rmse ,testy$rmse.1 , alternative = alternativa)
print(t_rmse)
}
load("~/Desktop/diploma/env_po_bubu_PC4.RData")
#sejvuju env
tabulka_nej_model <- as.data.frame(tabulka_nej_model)
tabulka_nej_model_z <- tabulka_nej_model
tabulka_nej_model <- tabulka_nej_model[-1,]
colnames(tabulka_nej_model) <- as.character(uga)
tabulka_nej_model
tabulka_nej_model$iterace <- as.numeric(tabulka_nej_model$iterace)
tabulka_nej_model$mae <- as.numeric(tabulka_nej_model$mae)
tabulka_nej_model$mse <- as.numeric(tabulka_nej_model$mse)
tabulka_nej_model$rmse <- as.numeric(tabulka_nej_model$rmse)
tabulka_nej_model
meritka <- c("mae","mse", "rmse")
par(mfrow = c(2, 2))
for (model in unique(tabulka_nej_model$ext)) {
for (predpoved in unique(tabulka_nej_model$rw)) {
data_graf <- tabulka_nej_model %>% filter(ext == model)
data_graf <- data_graf %>% filter(rw == predpoved)
if (model == "ext") {
nazev_grafu_ext <- "External regressor"
} else {
nazev_grafu_ext <- "Benchmark model"
}
if (predpoved == "rw") {
nazev_grafu_rw <- "Rolling window forecast"
} else {
nazev_grafu_rw <- "Expanding window forecast"
}
matplot(data_graf$iterace, data_graf[, meritka], type = "l", ylim = c(0.0,0.9),
xlab = "(Starting) Window length", ylab = "Value", main = c(paste(nazev_grafu_rw, " - ", nazev_grafu_ext)))
legend("topleft", legend = colnames(data_graf[, meritka]), col = 1:3, lty = 1, cex = 0.8)
}
}
line_types <- c(1, 1, 1, 2, 2, 2)
colores <- c("#3399FF", "#33CC66", "#FF0000", "#4DA6FF", "#66CC99", "#FF6666")#3399FF #33CC66
par(mfrow = c(1, 1))
for (predpoved in unique(tabulka_nej_model$rw)) {
if (predpoved == "rw") {
nazev_grafu_rw <- "Rolling window forecast"
} else {
nazev_grafu_rw <- "Expanding window forecast"
}
data_graf <- tabulka_nej_model %>% filter(rw == predpoved)
jmena_sloupcu <- colnames(data_graf)
print(predpoved)
data_graf <- cbind(data_graf %>% filter(ext == "ext"), data_graf %>% filter(ext == "bez"))
print(data_graf)
colnames(data_graf)[7:12] <- c("v1", "v2","v3", "mae - benchmark", "mse - benchmark", "rmse - benchmark")
meritka <- c("mae","mse", "rmse", "mae - benchmark", "mse - benchmark", "rmse - benchmark")
if(predpoved == "rw"){
osa_x <- "Window length"
} else {
osa_x <- "Starting window length"
}
if(predpoved == "rw"){
matplot(data_graf$iterace, data_graf[, meritka], type = "l", lty = line_types, ylim = c(0.0,1.4),
xlab = osa_x, ylab = "Value", col = colores, main = nazev_grafu_rw)
} else {
matplot(data_graf$iterace, data_graf[, meritka], type = "l", lty = line_types, ylim = c(0.0,1.4),
xlab = osa_x, ylab = "Value", col = colores, main = nazev_grafu_rw)
}
# Add a legend
legend("topleft", legend = colnames(data_graf[, meritka]), col = colores, lty = line_types, cex = 1)
}
tabulka_nej_model_testy <- tabulka_nej_model_testy[, c(4,5,6,10,11,12)]
t.test(tabulka_nej_model_testy$mae ,tabulka_nej_model_testy$mae.1 , alternative = alternativa)
#tisknuti tabulek do texu
{
print(xtable(min_rows, caption = "Best models",
digits = 2, type = "latex"), file = "min_rows.tex")
View(tabulka_arima_modelu)
View(gt_dss)
View(min_rows)
tabulka_arima_modelu %>% group_by(row_names) %>% count(promenna)
View(print(tabulka_arima_modelu %>% group_by(promenna) %>%filter(row_names == "2022/2")))
print(pca_2022)
pc_1 <- pca_2022[[2]]
pc_1 <- pc_1[,"PC1"]
pc_1 <- as.data.frame(pc_1 %>% round(2))
pc_1
print(xtable(pc_1, caption = "Degree of correlation between First principal component and other search queries",
digits = 2, type = "latex"), file = "tabulka_pc1.tex")
pc_1_modely <- tabulka_arima_modelu %>% filter(promenna == "PC1")
sorted_df <- pc_1_modely[order(pc_1_modely$model), ]
pc_1_modely <- sorted_df[1:3,]
pc_1_modely$coef <- as.numeric(pc_1_modely$coef)
pc_1_modely_rounded <- data.frame(sapply(pc_1_modely, function(x) {
if (is.numeric(x)) {
return(round(x, 4))
} else {
return(x)
}
}))
pc_1_modely
pc_1_modely <- pc_1_modely[,c(7,8,9,10,3,11,4,5,6,12,13,14)]
print(xtable(pc_1_modely, caption = "Modely",
digits = 2, type = "latex"), file = "tabulka_pc1_modely.tex")
pc_1_modely <- tabulka_arima_modelu %>% filter(promenna == "cena.nafty")
sorted_df <- pc_1_modely[order(pc_1_modely$benchmark), ]
pc_1_modely <- sorted_df[1:3,]
pc_1_modely$coef <- as.numeric(pc_1_modely$coef)
pc_1_modely_rounded <- data.frame(sapply(pc_1_modely, function(x) {
if (is.numeric(x)) {
return(round(x, 4))
} else {
return(x)
}
}))
pc_1_modely
pc_1_modely <- tabulka_arima_modelu %>% filter(row_names == "2022/2") %>% filter(promenna == "cena.nemovitosti")
sorted_df <- pc_1_modely[order(pc_1_modely$benchmark), ]
pc_1_modely <- sorted_df[1:3,]
pc_1_modely$coef <- as.numeric(pc_1_modely$coef)
pc_1_modely_rounded <- data.frame(sapply(pc_1_modely, function(x) {
if (is.numeric(x)) {
return(round(x, 4))
} else {
return(x)
}
}))
pc_1_modely
pc_1_modely <- tabulka_arima_modelu %>% filter(row_names == "2022/2") %>% filter(promenna == "cena.ropy")
sorted_df <- pc_1_modely[order(pc_1_modely$benchmark), ]
pc_1_modely <- sorted_df[1:3,]
pc_1_modely$coef <- as.numeric(pc_1_modely$coef)
pc_1_modely_rounded <- data.frame(sapply(pc_1_modely, function(x) {
if (is.numeric(x)) {
return(round(x, 4))
} else {
return(x)
}
}))
pc_1_modely
pc_1_modely <- tabulka_arima_modelu %>% filter(row_names == "2022/2") %>% filter(promenna == "inflace")
sorted_df <- pc_1_modely[order(pc_1_modely$benchmark), ]
pc_1_modely <- sorted_df[1:3,]
pc_1_modely$coef <- as.numeric(pc_1_modely$coef)
pc_1_modely_rounded <- data.frame(sapply(pc_1_modely, function(x) {
if (is.numeric(x)) {
return(round(x, 4))
} else {
return(x)
}
}))
pc_1_modely
pc_1_modely <- tabulka_arima_modelu %>% filter(row_names == "2023/2") %>% filter(promenna == "inflace")
sorted_df <- pc_1_modely[order(pc_1_modely$benchmark), ]
pc_1_modely <- sorted_df[1:3,]
pc_1_modely$coef <- as.numeric(pc_1_modely$coef)
pc_1_modely_rounded <- data.frame(sapply(pc_1_modely, function(x) {
if (is.numeric(x)) {
return(round(x, 4))
} else {
return(x)
}
}))
pc_1_modely
5 <8
}
load("~/Desktop/diploma/env_po_bubu_cena_benzinu.RData")
#sejvuju env
tabulka_nej_model <- as.data.frame(tabulka_nej_model)
tabulka_nej_model_z <- tabulka_nej_model
tabulka_nej_model <- tabulka_nej_model[-1,]
colnames(tabulka_nej_model) <- as.character(uga)
tabulka_nej_model
tabulka_nej_model$iterace <- as.numeric(tabulka_nej_model$iterace)
tabulka_nej_model$mae <- as.numeric(tabulka_nej_model$mae)
tabulka_nej_model$mse <- as.numeric(tabulka_nej_model$mse)
tabulka_nej_model$rmse <- as.numeric(tabulka_nej_model$rmse)
tabulka_nej_model
meritka <- c("mae","mse", "rmse")
par(mfrow = c(2, 2))
for (model in unique(tabulka_nej_model$ext)) {
for (predpoved in unique(tabulka_nej_model$rw)) {
data_graf <- tabulka_nej_model %>% filter(ext == model)
data_graf <- data_graf %>% filter(rw == predpoved)
if (model == "ext") {
nazev_grafu_ext <- "External regressor"
} else {
nazev_grafu_ext <- "Benchmark model"
}
if (predpoved == "rw") {
nazev_grafu_rw <- "Rolling window forecast"
} else {
nazev_grafu_rw <- "Expanding window forecast"
}
matplot(data_graf$iterace, data_graf[, meritka], type = "l", ylim = c(0.0,0.9),
xlab = "(Starting) Window length", ylab = "Value", main = c(paste(nazev_grafu_rw, " - ", nazev_grafu_ext)))
legend("topleft", legend = colnames(data_graf[, meritka]), col = 1:3, lty = 1, cex = 0.8)
}
}
line_types <- c(1, 1, 1, 2, 2, 2)
colores <- c("#3399FF", "#33CC66", "#FF0000", "#4DA6FF", "#66CC99", "#FF6666")#3399FF #33CC66
par(mfrow = c(1, 1))
for (predpoved in unique(tabulka_nej_model$rw)) {
if (predpoved == "rw") {
nazev_grafu_rw <- "Rolling window forecast"
} else {
nazev_grafu_rw <- "Expanding window forecast"
}
data_graf <- tabulka_nej_model %>% filter(rw == predpoved)
jmena_sloupcu <- colnames(data_graf)
print(predpoved)
data_graf <- cbind(data_graf %>% filter(ext == "ext"), data_graf %>% filter(ext == "bez"))
print(data_graf)
colnames(data_graf)[7:12] <- c("v1", "v2","v3", "mae - benchmark", "mse - benchmark", "rmse - benchmark")
meritka <- c("mae","mse", "rmse", "mae - benchmark", "mse - benchmark", "rmse - benchmark")
if(predpoved == "rw"){
osa_x <- "Window length"
} else {
osa_x <- "Starting window length"
}
if(predpoved == "rw"){
matplot(data_graf$iterace, data_graf[, meritka], type = "l", lty = line_types, ylim = c(0.0,1.4),
xlab = osa_x, ylab = "Value", col = colores, main = nazev_grafu_rw)
} else {
matplot(data_graf$iterace, data_graf[, meritka], type = "l", lty = line_types, ylim = c(0.0,1.4),
xlab = osa_x, ylab = "Value", col = colores, main = nazev_grafu_rw)
}
# Add a legend
legend("topleft", legend = colnames(data_graf[, meritka]), col = colores, lty = line_types, cex = 1)
}
for (predpoved in unique(tabulka_nej_model$rw)) {
if (predpoved == "rw") {
nazev_grafu_rw <- "Rolling window forecast"
} else {
nazev_grafu_rw <- "Expanding window forecast"
}
data_graf <- tabulka_nej_model %>% filter(rw == predpoved)
jmena_sloupcu <- colnames(data_graf)
data_graf <- cbind(data_graf %>% filter(ext == "ext"), data_graf %>% filter(ext == "bez"))
testy <- data_graf[,c(1,4,5,6,10,11,12)]
soucet_m <- testy$mae + testy$mse + testy$rmse
soucet_b <- testy$mae.1 + testy$mse.1 + testy$rmse.1
my_vector <- soucet_m
smallest_values <- sort(my_vector)[1:3]
# Get the indices of the smallest values
indices <- which(my_vector %in% smallest_values)
print(predpoved)
print("3 nejlepsi settingy okna")
print(testy[indices,"iterace"])
print("jak casto nizsi? (%)")
print(sum(soucet_m < soucet_b)/length(soucet_b))
print("parove modely")
alternativa <- c("less")
t_mae <- t.test(testy$mae ,testy$mae.1 , alternative = alternativa, paired = TRUE)
print(t_mae)
t_mse <- t.test(testy$mse ,testy$mse.1 , alternative = alternativa, paired = TRUE)
print(t_mse)
t_rmse <- t.test(testy$rmse ,testy$rmse.1 , alternative = alternativa, paired = TRUE)
print(t_rmse)
print("NEparove modely")
t_mae <- t.test(testy$mae ,testy$mae.1 , alternative = alternativa)
print(t_mae)
t_mse <- t.test(testy$mse ,testy$mse.1 , alternative = alternativa)
print(t_mse)
t_rmse <- t.test(testy$rmse ,testy$rmse.1 , alternative = alternativa)
print(t_rmse)
}
