?forecast.Arima
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_real_inf, order = c(1,1,0), xreg = ts_gt_inf)
# Generate the forecasted values for the next 12 months
forecast_data <- forecast::forecast.Arima(arima_model, xreg = ts_gt_inf, h = 12)
# Generate the forecasted values for the next 12 months
forecast_data <- forecast.Arima(arima_model, xreg = ts_gt_inf, h = 12)
# Generate the forecasted values for the next 12 months
forecast_data <- forecast.Arima(arima_model, xreg = ts_gt_inf, h = 12)
# Generate the forecasted values for the next 12 months
forecast_data <- forecast::forecast(arima_model, xreg = ts_gt_inf, h = 12)
# Load the necessary packages
library(forecast)
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_real_inf, order = c(1,1,0), xreg = ts_gt_inf)
# Generate the forecasted values for the next 12 months
forecast_data <- forecast::forecast(arima_model, xreg = ts_gt_inf, h = 12)
# Plot the actual and forecasted values
plot(forecast_data, main = "ARIMA(1,1,0) Forecast for Inflation",
xlab = "Time", ylab = "Real Inflation")
lines(ts_real_inf, col = "blue")
legend("topleft", legend = c("Actual", "Forecast"), lty = c(1,1), col = c("blue", "black"))
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_real_inf, order = c(1,1,0), xreg = ts_gt_inf)
# Generate the fitted values
fitted_values <- arima_model$fitted
# Plot the actual and fitted values
plot(ts_real_inf, main = "ARIMA(1,1,0) Fitted Values for Inflation",
xlab = "Time", ylab = "Real Inflation")
lines(fitted_values, col = "red")
legend("topleft", legend = c("Actual", "Fitted"), lty = c(1,1), col = c("blue", "red"))
legend("topleft", legend = c("Actual", "Fitted"), lty = c(1,1), col = c("black", "red"))
summary(arima_model)
rm(list = ls())
install.packages("devtools")
library(devtools)
library(readxl)
library(dplyr)
library(forecast)
library(aTSA)
library(tseries)
library(stringr)
library(lmtest)
library(rugarch)
rm(list = ls())
data <- list()
pocet_sheetu <- 4
for (i in 1:pocet_sheetu) {
data[[i]] <- read_excel("inflace.xlsx", sheet = i)
}
data[[2]] %>% head
for (i in 1:pocet_sheetu) {
x <- data[[i]]
y <- data.frame(x[,-1], row.names = x$Year)
data[[i]] <- y
}
for (i in 1:pocet_sheetu) {
print(i)
print(data[[i]] %>% head)
print(data[[i]] %>% dim)
}
data[[4]] <- data[[4]][,-13] # remove aggregate column nebo co to je
inf_cpm     <- data[[3]] %>% t %>% unlist %>% as.vector
inf_cpm     <- ts(inf_cpm, frequency = 12, start = c(1997, 1))  # inf, corresponding preceeding month
inf_cpm
plot(inf_cpm)
gt <- read.csv("search_trends.csv", row.names = 1)
gt %>% head
gt%>% dim
start <- rownames(gt)[1]
rok   <- as.numeric(substr(start, 1, 4))
mesic <- as.numeric(substr(start, 6, 7))
start <- c(rok, mesic)
print(start)
end   <- c(2022, 4)
gt_inf   <- ts(gt$inflace, frequency = 12, start = start)
plot(gt_inf)
tseries::adf.test(gt_inf)
s_inf_cpm <- decompose(inf_cpm, "multiplicative")$random
plot(s_inf_cpm)
s_gt_inf <- decompose(gt_inf, "multiplicative")$random
plot(s_gt_inf)
s_inf_cpm_s <- ts(s_inf_cpm, frequency = 12, start = c(rok, mesic + 1), end = end)
s_gt_inf_s <- ts(s_gt_inf, frequency = 12, start = c(rok, mesic + 1), end = end)
length(s_inf_cpm_s)
length(s_gt_inf_s)
s_gt_inf_s <- s_gt_inf_s / mean(s_gt_inf_s, na.rm = TRUE) * mean(s_inf_cpm_s, na.rm = TRUE)
s_inf_cpm_s
s_gt_inf_s
plot(s_inf_cpm_s)
plot(s_gt_inf_s)
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 1)
lmtest::grangertest(s_gt_inf_s, s_inf_cpm_s, order = 2)
# Load the necessary packages
library(forecast)
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_real_inf, order = c(1,1,1), xreg = ts_gt_inf)
summary(arima_model)
acf(arima_model)
pacf(arima_model)
# Generate the fitted values
fitted_values <- arima_model$fitted
# Plot the actual and fitted values
plot(ts_real_inf, main = "ARIMA(1,1,0) Fitted Values for Inflation",
xlab = "Time", ylab = "Real Inflation")
lines(fitted_values, col = "red")
legend("topleft", legend = c("Actual", "Fitted"), lty = c(1,1), col = c("black", "red"))
######################################################################################################
# Load the necessary packages
library(vars)
# Load the necessary packages
library(vars)
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_gt_inf <- ts(data = s_gt_inf_s, start = c(2004, 1), frequency = 12)
# Combine the time series into a matrix
data_matrix <- cbind(ts_real_inf, ts_gt_inf)
complete_matrix <- data_matrix[complete.cases(data_matrix), ]
# Fit a VAR model with lag length 1
var_model <- vars::VAR(complete_matrix, p = 1, type = "const")
# Print a summary of the model
summary(var_model)
# Plot the impulse response function for the Google Trends variable
irf_plot <- plot(vars::irf(var_model, impulse = "ts_gt_inf", response = "ts_real_inf", n.ahead = 12))
# Create a sample data frame with some data
set.seed(123)
gt <- data.frame(
date = seq(as.Date("2000-01-01"), by = "month", length.out = 120),
col1 = rnorm(120),
col2 = rnorm(120),
col3 = rnorm(120)
)
# Convert each column of the data frame to a time series and remove seasonality
for (i in 1:ncol(gt)) {
ts_data <- ts(gt[, i], start = c(2000, 1), frequency = 12)
decomp_data <- decompose(ts_data)
detrended_data <- decomp_data$x #+ decomp_data$trend #trend #seasonal
ts_detrended_data <- ts(detrended_data, start = start, end = end, frequency = 12)
ts_detrended_data <- ts_detrended_data[-length(ts_detrended_data)]
cor_value <- cor(ts_detrended_data, ts_real_inf, use = "pairwise.complete.obs")
print(paste0("Correlation for column ", i - 1, ": ", cor_value))
print(ts_detrended_data[1:30])
}
# Convert each column of the data frame to a time series and remove seasonality
for (i in 1:ncol(gt)) {
ts_data <- ts(gt[, i], start = c(2000, 1), frequency = 12)
decomp_data <- decompose(ts_data)
detrended_data <- decomp_data$x #+ decomp_data$trend #trend #seasonal
ts_detrended_data <- ts(detrended_data, start = start, end = end, frequency = 12)
ts_detrended_data <- ts_detrended_data[-length(ts_detrended_data)]
cor_value <- cor(ts_detrended_data, ts_real_inf, use = "pairwise.complete.obs")
print(paste0("Correlation for column ", i - 1, ": ", cor_value))
print(ts_detrended_data[1:30])
}
install.packages("readxl")
install.packages("readxl")
inflation_data <- read_excel("deutschland_mom.xlsx")
library(readxl)
inflation_data <- read_excel("deutschland_mom.xlsx")
View(inflation_data)
inflation_data <- read_excel("deutschland_mom.xlsx")
View(inflation_data)
ts_inflation <- ts(as.matrix(inflation_data), start = c(2005, 1), end = c(2023, 12), frequency = 12)
ts_inflation
View(ts_inflation)
as.vector(inflation_data)
inflation_data <- inflation_data[,-1]
View(inflation_data)
as.vector(inflation_data)
inflation_data <- as.numeric(inflation_data)
inflation_data <- as.data.frame(inflation_data)
inflation_data <- as.numeric(inflation_data)
View(inflation_data)
deu <- t(inflation_data)
deu
as.vector(deu)
ts_deu <- ts(deu, start = c(2005, 1), end = c(2023, 12), frequency = 12)
ts_deu
deu
deu <- as.vector(deu)
ts_deu <- ts(deu, start = c(2005, 1), end = c(2023, 12), frequency = 12)
ts_deu
gt <- read.csv("search_trends_de.csv", row.names = 1)
gt %>% head
gt%>% dim
library(dplyr)
gt <- read.csv("search_trends_de.csv", row.names = 1)
gt %>% head
plot.ts(ts_deu)
decompose(ts_deu)
ts_deu
start <- c(2006, 1)
end <- c(2022, 4)
ts_deu <- ts(deu, start = start, end = end, frequency = 12)
ts_deu
ts_deu <- ts(deu, start = c(2005, 1), end = c(2023, 12), frequency = 12)
ts_deu_s <- ts_deu[start = c(2005, 1), end = c(2022, 4)]
ts_data <- ts(rnorm(220), start = c(2005, 1), frequency = 12)
ts_data_subset <- ts_data[start = c(2005, 1), end = c(2022, 4)]
ts_deu_s <- window(ts_deu, start = c(2005, 1), end = c(2022, 4))
plot.ts(ts_deu_s)
decompose(ts_deu_s)
ts_deu_s
decompose(ts_deu_s)
ts_deu_s
inflation_data <- read_excel("deutschland_mom.xlsx")
View(inflation_data)
ts_deu_s <- window(ts_deu, start = c(2006, 1), end = c(2022, 4))
plot.ts(ts_deu_s)
ts_deu_s
ts_deu_sd <- decompose(ts_deu_s)$random
ts_deu_s
?decompose
ts_deu_sd <- decompose(ts_deu_s)$trend
ts_deu_s %>% is.numeric
ts_deu_s * 5
ts_deu_s %>% class()
ts_deu_s <- as.numeric(ts_deu_s)
ts_deu_sd <- decompose(ts_deu_s)$trend
ts_deu_s
deu
# create a vector with some values as ".."
my_vector <- c("1", "..", "2", "..", "3")
# replace all ".." values with "NA"
my_vector <- gsub(pattern = "\\.\\.", replacement = "NA", x = my_vector)
# convert the vector to numeric format
my_vector <- as.numeric(my_vector)
# print the result
print(my_vector)
deu <- as.vector(deu)
deu <- gsub(pattern = "\\.\\.", replacement = "NA", x = deu)
deu <- as.numeric(deu)
ts_deu <- ts(deu, start = c(2005, 1), end = c(2023, 12), frequency = 12)
start <- c(2006, 1)
end <- c(2022, 4)
ts_deu_s <- window(ts_deu, start = c(2006, 1), end = c(2022, 4))
plot.ts(ts_deu_s)
ts_deu_s %>% class()
#ts_deu_s <- as.numeric(ts_deu_s)
ts_deu_s
ts_deu_sd <- decompose(ts_deu_s)$trend
ts_deu_sd
ts_deu_sd <- decompose(ts_deu_s, "multiplicatice")$trend
ts_deu_sd <- decompose(ts_deu_s, "multiplicative")$trend
ts_deu_sd
ts_deu_sd <- decompose(ts_deu_s, "multiplicative")$random
ts_deu_sd
ts_deu_sd <- decompose(ts_deu_s, "multiplicative")$random
ts_deu_sd
plot(ts_deu_sd)
gt <- read.csv("search_trends_de.csv", row.names = 1)
gt %>% head
gt%>% dim
# Convert each column of the data frame to a time series and remove seasonality
for (i in 1:ncol(gt)) {
ts_data <- ts(gt[, i], start = c(2004, 1), frequency = 12)
ts_data <- window(ts_data, start = start, end = end)
decomp_data <- decompose(ts_data)
detrended_data <- decomp_data$random #+ decomp_data$trend #trend #seasonal
ts_detrended_data <- ts(detrended_data, start = start, end = end, frequency = 12)
ts_detrended_data <- ts_detrended_data[-length(ts_detrended_data)]
cor_value <- cor(ts_detrended_data, ts_real_inf, use = "pairwise.complete.obs")
print(paste0("Correlation for column ", i - 1, ": ", cor_value))
print(ts_detrended_data[1:30])
}
ts_deu_sd
ts_data <- ts(gt[, 1], start = c(2004, 1), frequency = 12)
ts_data <- window(ts_data, start = start, end = end)
ts_data
decomp_data <- decompose(ts_data)
detrended_data <- decomp_data$random #+ decomp_data$trend #trend #seasonal
ts_detrended_data <- ts(detrended_data, start = start, end = end, frequency = 12)
ts_detrended_data
# ts_detrended_data <- ts_detrended_data[-length(ts_detrended_data)]
cor_value <- cor(ts_detrended_data, ts_real_inf, use = "pairwise.complete.obs")
ts_deu_sd %>% dim()
ts_deu_sd %>% length()
ts_detrended_data %>% length()
ts_detrended_data %>% class
# ts_detrended_data <- ts_detrended_data[-length(ts_detrended_data)]
cor_value <- cor(ts_detrended_data, ts_real_inf, use = "pairwise.complete.obs")
# ts_detrended_data <- ts_detrended_data[-length(ts_detrended_data)]
cor_value <- cor(ts_detrended_data, ts_real_inf) #, use = "pairwise.complete.obs")
# Convert each column of the data frame to a time series and remove seasonality
for (i in 1:ncol(gt)) {
ts_data <- ts(gt[, 1], start = c(2004, 1), frequency = 12)
ts_data <- window(ts_data, start = start, end = end)
decomp_data <- decompose(ts_data)
detrended_data <- decomp_data$random #+ decomp_data$trend #trend #seasonal
ts_detrended_data <- ts(detrended_data, start = start, end = end, frequency = 12)
# ts_detrended_data <- ts_detrended_data[-length(ts_detrended_data)]
cor_value <- cor(ts_detrended_data, ts_real_inf, use = "pairwise.complete.obs")
print(paste0("Correlation for column ", i - 1, ": ", cor_value))
print(ts_detrended_data[1:30])
}
print(ts_deu_sd)
print(ts_detrended_data)
ts_data <- ts(gt[, 1], start = c(2006, 1), frequency = 12)
ts_data <- window(ts_data, start = start, end = end)
decomp_data <- decompose(ts_data)
detrended_data <- decomp_data$random #+ decomp_data$trend #trend #seasonal
ts_detrended_data <- ts(detrended_data, start = start, end = end, frequency = 12)
# ts_detrended_data <- ts_detrended_data[-length(ts_detrended_data)]
cor_value <- cor(ts_detrended_data, ts_real_inf, use = "pairwise.complete.obs")
class(ts_detrended_data)
class(ts_deu_sd)
# ts_detrended_data <- ts_detrended_data[-length(ts_detrended_data)]
cor_value <- cor(ts_detrended_data, ts_real_inf, use = "pairwise.complete.obs")
# ts_detrended_data <- ts_detrended_data[-length(ts_detrended_data)]
cor_value <- cor(ts_detrended_data, ts_real_inf)#, use = "pairwise.complete.obs")
length(ts_deu_sd)
length(ts_detrended_data)
m <- matrix(c(ts_deu_sd, ts_detrended_data))
m
m <- matrix(c(ts_deu_sd, ts_detrended_data), ncol = 2)
m
cor(m[,1], m[,2], use = "pairwise.complete.obs")
# Convert each column of the data frame to a time series and remove seasonality
for (i in 1:ncol(gt)) {
ts_data <- ts(gt[, 1], start = c(2006, 1), frequency = 12)
ts_data <- window(ts_data, start = start, end = end)
decomp_data <- decompose(ts_data)
detrended_data <- decomp_data$random #+ decomp_data$trend #trend #seasonal
ts_detrended_data <- ts(detrended_data, start = start, end = end, frequency = 12)
# ts_detrended_data <- ts_detrended_data[-length(ts_detrended_data)]
m <- matrix(c(ts_deu_sd, ts_detrended_data), ncol = 2)
cor_value <- cor(m[,1], m[,2], use = "pairwise.complete.obs")#, use = "pairwise.complete.obs")
print(paste0("Correlation for column ", i - 1, ": ", cor_value))
print(ts_detrended_data[1:30])
}
# Convert each column of the data frame to a time series and remove seasonality
for (i in 1:ncol(gt)) {
ts_data <- ts(gt[, 1], start = c(2006, 1), frequency = 12)
ts_data <- window(ts_data, start = start, end = end)
decomp_data <- decompose(ts_data)
detrended_data <- decomp_data$random #+ decomp_data$trend #trend #seasonal
ts_detrended_data <- ts(detrended_data, start = start, end = end, frequency = 12)
# ts_detrended_data <- ts_detrended_data[-length(ts_detrended_data)]
m <- matrix(c(ts_deu_sd, ts_detrended_data), ncol = 2)
cor_value <- cor(m[,1], m[,2], use = "pairwise.complete.obs")#, use = "pairwise.complete.obs")
print(paste0("Correlation for column ", i - 1, ": ", cor_value))
#print(ts_detrended_data[1:30])
}
# Convert each column of the data frame to a time series and remove seasonality
for (i in 1:ncol(gt)) {
ts_data <- ts(gt[, i], start = c(2006, 1), frequency = 12)
ts_data <- window(ts_data, start = start, end = end)
decomp_data <- decompose(ts_data)
detrended_data <- decomp_data$random #+ decomp_data$trend #trend #seasonal
ts_detrended_data <- ts(detrended_data, start = start, end = end, frequency = 12)
# ts_detrended_data <- ts_detrended_data[-length(ts_detrended_data)]
m <- matrix(c(ts_deu_sd, ts_detrended_data), ncol = 2)
cor_value <- cor(m[,1], m[,2], use = "pairwise.complete.obs")#, use = "pairwise.complete.obs")
print(paste0("Correlation for column ", i - 1, ": ", cor_value))
#print(ts_detrended_data[1:30])
}
# Convert each column of the data frame to a time series and remove seasonality
for (i in 1:ncol(gt)) {
ts_data <- ts(gt[, i], start = c(2006, 1), frequency = 12)
ts_data <- window(ts_data, start = start, end = end)
decomp_data <- decompose(ts_data)
detrended_data <- decomp_data$random #+ decomp_data$trend #trend #seasonal
ts_detrended_data <- ts(detrended_data, start = start, end = end, frequency = 12)
# ts_detrended_data <- ts_detrended_data[-length(ts_detrended_data)]
m <- matrix(c(ts_deu_sd, ts_detrended_data), ncol = 2)
cor_value <- cor(m[,1], m[,2], use = "pairwise.complete.obs")#, use = "pairwise.complete.obs")
print(paste0("Correlation for column ", i - 1, ": ", cor_value, colnames(gt)[i]))
#print(ts_detrended_data[1:30])
}
data_frames <- list()
# Convert each column of the data frame to a time series and remove seasonality
for (i in 1:ncol(gt)) {
ts_data <- ts(gt[, i], start = c(2006, 1), frequency = 12)
ts_data <- window(ts_data, start = start, end = end)
decomp_data <- decompose(ts_data)
detrended_data <- decomp_data$random #+ decomp_data$trend #trend #seasonal
ts_detrended_data <- ts(detrended_data, start = start, end = end, frequency = 12)
# ts_detrended_data <- ts_detrended_data[-length(ts_detrended_data)]
m <- matrix(c(ts_deu_sd, ts_detrended_data), ncol = 2)
cor_value <- cor(m[,1], m[,2], use = "pairwise.complete.obs")#, use = "pairwise.complete.obs")
print(paste0("Correlation for column ", i - 1, ": ", cor_value, colnames(gt)[i]))
#print(ts_detrended_data[1:30])
data_frames[[paste0("df_", i)]] <- ts_detrended_data
}
data_frames["df_4"]
data_frames[0]
View(data_frames)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_deu_sd, order = c(1,1,1), xreg = data_frames[4])
data_frames[4]
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_deu_sd, order = c(1,1,1), xreg = as.numeric(data_frames[4]))
summary(arima_model)
explanatory <- data_frrames[4]
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_deu_sd, order = c(1,1,1), xreg = explanatory)
explanatory <- data_frames[4]
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_deu_sd, order = c(1,1,1), xreg = explanatory)
explanatory <- as.matrix(data_frames[4])
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_deu_sd, order = c(1,1,1), xreg = explanatory)
summary(arima_model)
explanatory <- as.numeric(as.matrix(data_frames[4]))
explanatory <- as.matrix(as.numeric(data_frames[4]))
explanatory <- ts(data_frames[4], start = start, frequency = 12)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_deu_sd, order = c(1,1,1), xreg = explanatory)
explanatory <- ts(as.vector(data_frames[4]), start = start, frequency = 12)
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_deu_sd, order = c(1,1,1), xreg = explanatory)
explanatory <- ts(as.numeric(as.vector(data_frames[4])), start = start, frequency = 12)
data_frames <- list()
# Convert each column of the data frame to a time series and remove seasonality
for (i in 1:ncol(gt)) {
ts_data <- ts(gt[, 3], start = c(2006, 1), frequency = 12)
ts_data <- window(ts_data, start = start, end = end)
decomp_data <- decompose(ts_data)
detrended_data <- decomp_data$random #+ decomp_data$trend #trend #seasonal
ts_detrended_data <- ts(detrended_data, start = start, end = end, frequency = 12)
# ts_detrended_data <- ts_detrended_data[-length(ts_detrended_data)]
m <- matrix(c(ts_deu_sd, ts_detrended_data), ncol = 2)
cor_value <- cor(m[,1], m[,2], use = "pairwise.complete.obs")#, use = "pairwise.complete.obs")
print(paste0("Correlation for column ", i - 1, ": ", cor_value, colnames(gt)[i]))
#print(ts_detrended_data[1:30])
data_frames[[paste0("df_", i)]] <- ts_detrended_data
}
g <- 3
# Convert each column of the data frame to a time series and remove seasonality
for (i in 1:ncol(gt)) {
ts_data <- ts(gt[, g], start = c(2006, 1), frequency = 12)
ts_data <- window(ts_data, start = start, end = end)
decomp_data <- decompose(ts_data)
detrended_data <- decomp_data$random #+ decomp_data$trend #trend #seasonal
ts_detrended_data <- ts(detrended_data, start = start, end = end, frequency = 12)
# ts_detrended_data <- ts_detrended_data[-length(ts_detrended_data)]
m <- matrix(c(ts_deu_sd, ts_detrended_data), ncol = 2)
cor_value <- cor(m[,1], m[,2], use = "pairwise.complete.obs")#, use = "pairwise.complete.obs")
print(paste0("Correlation for column ", i - 1, ": ", cor_value, colnames(gt)[i]))
#print(ts_detrended_data[1:30])
data_frames[[paste0("df_", g)]] <- ts_detrended_data
}
g <- 3
# Convert each column of the data frame to a time series and remove seasonality
for (i in 1:ncol(gt)) {
ts_data <- ts(gt[, g], start = c(2006, 1), frequency = 12)
ts_data <- window(ts_data, start = start, end = end)
decomp_data <- decompose(ts_data)
detrended_data <- decomp_data$random #+ decomp_data$trend #trend #seasonal
ts_detrended_data <- ts(detrended_data, start = start, end = end, frequency = 12)
# ts_detrended_data <- ts_detrended_data[-length(ts_detrended_data)]
m <- matrix(c(ts_deu_sd, ts_detrended_data), ncol = 2)
cor_value <- cor(m[,1], m[,2], use = "pairwise.complete.obs")#, use = "pairwise.complete.obs")
print(paste0("Correlation for column ", i - 1, ": ", cor_value, colnames(gt)[g]))
#print(ts_detrended_data[1:30])
data_frames[[paste0("df_", g)]] <- ts_detrended_data
}
g <- 4
# Convert each column of the data frame to a time series and remove seasonality
for (i in 1:ncol(gt)) {
ts_data <- ts(gt[, g], start = c(2006, 1), frequency = 12)
ts_data <- window(ts_data, start = start, end = end)
decomp_data <- decompose(ts_data)
detrended_data <- decomp_data$random #+ decomp_data$trend #trend #seasonal
ts_detrended_data <- ts(detrended_data, start = start, end = end, frequency = 12)
# ts_detrended_data <- ts_detrended_data[-length(ts_detrended_data)]
m <- matrix(c(ts_deu_sd, ts_detrended_data), ncol = 2)
cor_value <- cor(m[,1], m[,2], use = "pairwise.complete.obs")#, use = "pairwise.complete.obs")
print(paste0("Correlation for column ", i - 1, ": ", cor_value, colnames(gt)[g]))
#print(ts_detrended_data[1:30])
data_frames[[paste0("df_", g)]] <- ts_detrended_data
}
# Fit the ARIMA(1,1,0) model to the data
arima_model <- forecast::Arima(ts_deu_sd, order = c(1,1,1), xreg = ts_detrended_data)
summary(arima_model)
# Generate the fitted values
fitted_values <- arima_model$fitted
# Plot the actual and fitted values
plot(ts_real_inf, main = "ARIMA(1,1,0) Fitted Values for Inflation",
xlab = "Time", ylab = "Real Inflation")
lines(fitted_values, col = "red")
legend("topleft", legend = c("Actual", "Fitted"), lty = c(1,1), col = c("black", "red"))
# Plot the actual and fitted values
plot(ts_deu_sd, main = "ARIMA(1,1,0) Fitted Values for Inflation",
xlab = "Time", ylab = "Real Inflation")
lines(fitted_values, col = "red")
legend("topleft", legend = c("Actual", "Fitted"), lty = c(1,1), col = c("black", "red"))
######################################################################################################
# Load the necessary packages
library(vars)
# Load the necessary packages
library(vars)
# Combine the time series into a matrix
data_matrix <- cbind(ts_deu_sd, ts_detrended_data)
complete_matrix <- data_matrix[complete.cases(data_matrix), ]
# Fit a VAR model with lag length 1
var_model <- vars::VAR(complete_matrix, p = 1, type = "const")
# Print a summary of the model
summary(var_model)
?stl
