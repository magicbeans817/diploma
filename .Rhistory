# Printing the error metrics
cat("MAE:", mae, "\n")
cat("MSE:", mse, "\n")
cat("RMSE:", rmse, "\n")
}
}
# Usage:
remove_and_fit_arima(ts_real_inf_3, ext_regressors, remove_n = 10)
remove_and_fit_arima <- function(ts_real_inf_3, ext_regressors, remove_n = start_forecast) {
# Removing the first remove_n observations
ts_real_inf_3_trimmed <- window(ts_real_inf_3, start = remove_n + 1)
ext_regressors_trimmed <- window(ext_regressors, start = remove_n + 1)
# Fitting the ARIMA model
arima_model <- tryCatch(forecast::Arima(ts_real_inf_3_trimmed, order = c(1, 1, 2), xreg = ext_regressors_trimmed),
error = function(e) {
cat("Error:", e$message, "\n")
return(NULL)
})
if (!is.null(arima_model)) {
# Forecasting
forecast_result <- forecast::forecast(arima_model, h = 1, xreg = ext_regressors_trimmed)
# Calculating errors
actual <- ts_real_inf_3_trimmed
predicted <- forecast_result$mean
mae <- mean(abs(actual - predicted), na.rm = TRUE)
mse <- mean((actual - predicted)^2, na.rm = TRUE)
rmse <- sqrt(mse)
# Printing the error metrics
cat("MAE:", mae, "\n")
cat("MSE:", mse, "\n")
cat("RMSE:", rmse, "\n")
}
}
remove_and_fit_arima <- function(ts_real_inf_3, ext_regressors, remove_n = start_forecast) {
# Removing the first remove_n observations
ts_real_inf_3_trimmed <- window(ts_real_inf_3, start = remove_n + 1)
ext_regressors_trimmed <- window(ext_regressors, start = remove_n + 1)
# Fitting the ARIMA model
arima_model <- tryCatch(forecast::Arima(ts_real_inf_3_trimmed, order = c(1, 1, 2), xreg = ext_regressors_trimmed),
error = function(e) {
cat("Error:", e$message, "\n")
return(NULL)
})
if (!is.null(arima_model)) {
# Forecasting
forecast_result <- forecast::forecast(arima_model, h = 1, xreg = ext_regressors_trimmed)
# Calculating errors
actual <- ts_real_inf_3_trimmed
predicted <- forecast_result$mean
mae <- mean(abs(actual - predicted), na.rm = TRUE)
mse <- mean((actual - predicted)^2, na.rm = TRUE)
rmse <- sqrt(mse)
# Printing the error metrics
cat("MAE:", mae, "\n")
cat("MSE:", mse, "\n")
cat("RMSE:", rmse, "\n")
}
}
library(readxl)
library(data.table)
library(dplyr)
library(forecast)
library(aTSA)
library(tseries)
library(stringr)
library(lmtest)
library(rugarch)
library(xts)
library(stats)
library(crayon)
library(vars)
library(tibble)
new_data <- 0
if (new_data == 0){
rm(list = ls())
new_data <- 0
}
DEBUG <- FALSE
debug_print <- function(arg) {
if(DEBUG == TRUE){
print(arg)
}
}
data <- list()
pocet_sheetu <- 4
for (i in 1:pocet_sheetu) {
data[[i]] <- read_excel("inflace.xlsx", sheet = i)
}
data[[2]] %>% head
for (i in 1:pocet_sheetu) {
x <- data[[i]]
y <- data.frame(x[,-1], row.names = x$Year)
data[[i]] <- y
}
for (i in 1:pocet_sheetu) {
debug_print(i)
debug_print(data[[i]] %>% head)
debug_print(data[[i]] %>% dim)
}
data[[4]] <- data[[4]][,-13] # remove aggregate column nebo co to je
inf_cpm     <- data[[3]] %>% t %>% unlist %>% as.vector
inf_cpm     <- ts(inf_cpm, frequency = 12, start = c(1997, 1))  # inf, corresponding preceeding month
inf_cpm
plot(inf_cpm)
######################################################################################################
# 2) Google trends data
gt <- read.csv("search_trends.csv", row.names = 1)
gt %>% head
gt%>% dim
rownm <- as.Date(rownames(gt), format = "%Y-%d-%m")
rownm <- format(rownm, "%Y-%m-%d")
start <- rownames(gt)[1]
rok   <- as.numeric(substr(start, 1, 4))
mesic <- as.numeric(substr(start, 6, 7))
start <- c(rok, mesic)
debug_print(start)
jmena_sloupecku <- c("promenna", "p-value", "AIC","AICc","BIC", "AR", "I", "MA", "lag", "sAIC", "sAICc","sBIC")
pocet_sloupecku <- length(jmena_sloupecku)
tabulka_arima_modelu <- data.frame(matrix(ncol = pocet_sloupecku, nrow = 0))
colnames(tabulka_arima_modelu) <- jmena_sloupecku
my_matrix <- matrix(c(2019, 2, 2022, 2, 2023, 2), nrow = 3, ncol = 2, byrow = TRUE)
my_matrix_n <- nrow(my_matrix)
# Create an empty list to store the row vectors
row_vectors <- vector("list", length = my_matrix_n)
originalni_modely <- matrix(c(1:6), nrow = 1)
colnames(originalni_modely) <- c("dAR","dI","dMA","dAIC","dAICc","dBIC")
if (new_data == 0){
for (rocnik in 1:my_matrix_n) {
row_vectors[[rocnik]] <- my_matrix[rocnik, ]
end <- row_vectors[[rocnik]]
debug_print(end)
#end   <- c(2022, 2)
# Convert all columns to numeric
gt_numeric <- data.frame(lapply(gt, as.numeric))
# Remove seasonality from the data
gt_deseasonalized <- data.frame(lapply(gt_numeric, function(x) {
stl_model <- stl(ts(x, frequency = 12), s.window = "periodic")
deseasonalized <- stl_model$time.series[, "remainder"]
return(deseasonalized)
}))
# Print the deseasonalized data
row.names(gt_deseasonalized) <- rownm
debug_print(gt_deseasonalized)
for (i in 1:ncol(gt_deseasonalized)) {
plot(gt_deseasonalized[,i], ylab = colnames(gt_deseasonalized)[i])
tseries::adf.test(gt_deseasonalized[,i])
}
head(gt_deseasonalized)
tail(gt_deseasonalized)
gt_dss <- gt_deseasonalized
gt_dss <- as.matrix(gt_dss)
######################################################################################################
# Seasonality u inflace
ts_data <- na.omit(inf_cpm)
ts_decomposed <- stl(ts_data, s.window = "periodic")
# Subtract the seasonal component from the original time series to create the deseasonalized time series
ts_deseasonalized <- ts_data - ts_decomposed$time.series[, "seasonal"]
# Plot the original time series and the deseasonalized time series
#par(mfrow = c(2, 1))
plot(ts_data, main = "Original Time Series")
plot(ts_deseasonalized, main = "Deseasonalized Time Series")
######################################################################################################
# Subsetting, Granger, adjustment of GT
s_inf_cpm_s <- window(ts_deseasonalized, frequency = 12, start = c(rok, mesic), end = end)
for (i in 1:ncol(gt_dss)) {
x <- ts(gt_dss[, i], start = start, frequency = 12)
for (j in 1:3) {
y<- lmtest::grangertest(s_inf_cpm_s, x, order = j)
debug_print(y)
debug_print(colnames(gt_dss)[i])
}
}
######################################################################################################
# PCA
pca <- prcomp(gt_dss, scale. = TRUE)
# Print PCA results (eigenvalues, eigenvectors, and standard deviations)
debug_print(pca)
index <- 0
for (i in 1:length(pca$sdev)) {
debug_print(i)
if (pca$sdev[i] > 1){
index <- index + 1
}
}
gt_dss <- cbind(gt_dss, pca$x[,c(1:index)])
######################################################################################################
# Arima
# Convert the data to time series format
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ar <- 1
d  <- 1
ma <- 1 #jednicka idealni
# Srovnani s arimou bez external regresoru
arima_model <- forecast::Arima(ts_real_inf, order = c(ar,d,ma))
ssm <- matrix(c("originalni model", NA, arima_model$aic, arima_model$aicc, arima_model$bic, ar, d, ma, "lag", "Vojta", "je", "debil"), nrow = 1, ncol = length(jmena_sloupecku))
colnames(ssm) <- jmena_sloupecku
pocet_ss <- 0
opposite_lag <- function(x, k) {
c(tail(x, -k), rep(NA, k))
}
# Remove the last observation from the data as well
ts_real_inf_2 <- ts_real_inf[-length(ts_real_inf)]
ts_real_inf_2 <- ts(ts_real_inf_2, start = start, frequency = 12)
ts_real_inf_3 <- ts_real_inf[-1]
ts_real_inf_3 <- ts(ts_real_inf_3, start = c(start[1], (start[2] + 1)), frequency = 12)
cifry <- 9
######################################################################################################
for (ar in 1:3) {
for (d in 0:1) {
for (ma in 1:3) {
for (i in 1:ncol(gt_dss)) {
debug_print(i)
regresor <- ts(data = gt_dss[,i], start = c(2004, 1), end = end, frequency = 12)
regresor <- regresor / mean(regresor) * mean(ts_real_inf)
#print(regresor)
for (promenna in c("regresor","delay", "posun_vpred")) {
rozeznani_do_tabulky <- promenna
if (promenna == "regresor") {
arima_model <- try(forecast::Arima(ts_real_inf, order = c(ar,d,ma), xreg = regresor))
} else if(promenna == "delay"){
ext_regressor <- regresor
#future_values <- opposite_lag(ext_regressor, 1)
posun <- 1
future_values <- stats::lag(ext_regressor, posun)
ext_regressors <- ts(future_values[-(1:posun)], start = c(start[1], (start[2])), frequency = 12)
#ext_regressors <- ts(regresor, start = c(start[1], (start[2]+1)))
arima_model <- try(forecast::Arima(ts_real_inf_3, order = c(ar,d,ma), xreg = ext_regressors))
#print(ext_regressors)
#print(ts_real_inf_3)
#print("Konec")
} else if(promenna == "posun_vpred") {
ext_regressor <- regresor
posun <- 1
future_values <- opposite_lag(ext_regressor, posun)
# Remove the last row, as it contains NA for future_values
ext_regressors <- ts(future_values[-length(future_values)], start = start, frequency = 12) #ext_regressors[-nrow(ext_regressors), ]
arima_model <- try(forecast::Arima(ts_real_inf_2, order = c(ar,d,ma), xreg = ext_regressors))
}
# Pro pripad multiple regression
# Combine the original external regressor and its future values into a matrix
#ext_regressors <- cbind(ext_regressor, future_values)
#colnames(ext_regressors) <- c("ext_regressor", "future_values")
#
# Check if there was an error
if (!inherits(arima_model, "try-error")) {
# Store the ARIMA model in the list if no error occurred
} else {
# Print a message and continue to the next iteration if an error occurred
cat("Error encountered for ARIMA(", i) # . Skipping this model.\n")
next  # Continue to the next iteration
}
se_coef <- sqrt(diag(arima_model$var.coef))["xreg"]
co <- arima_model$coef["xreg"]
ss <- co/ se_coef
if (is.nan(se_coef) == TRUE | is.nan(co) == TRUE) {
p_value <- 1
} else {
p_value <- round(2 * (1 - pnorm(abs(ss))), digits = 4)
}
if (p_value < 0.1 ) {
debug_print("p_value")
debug_print(p_value)
pocet_ss <- pocet_ss + 1
debug_print(i)
b <- colnames(gt_dss)[i]
cat(red(b))
moje_aic <- round(arima_model$aic, digits = cifry)
moje_aicc <- round(arima_model$aicc, digits = cifry)
moje_bic <- round(arima_model$bic, digits = cifry)
if (rozeznani_do_tabulky == "regresor") {
srovnavaci_model <- try(forecast::Arima(ts_real_inf, order = c(ar,d,ma)))
srovnavaci_vektor <- c(as.character(ar), as.character(d), as.character(ma), srovnavaci_model$aic, srovnavaci_model$aicc, srovnavaci_model$bic)
originalni_modely <- rbind(originalni_modely,srovnavaci_vektor)
} else if (rozeznani_do_tabulky == "delay") {
srovnavaci_model <- try(forecast::Arima(ts_real_inf_3, order = c(ar,d,ma)))
srovnavaci_vektor <- c(as.character(ar), as.character(d), as.character(ma), srovnavaci_model$aic, srovnavaci_model$aicc, srovnavaci_model$bic)
originalni_modely <- rbind(originalni_modely, srovnavaci_vektor)
} else if (rozeznani_do_tabulky == "posun_vpred") {
srovnavaci_model <- try(forecast::Arima(ts_real_inf_2, order = c(ar,d,ma)))
srovnavaci_vektor <- c(as.character(ar), as.character(d), as.character(ma), srovnavaci_model$aic, srovnavaci_model$aicc, srovnavaci_model$bic)
originalni_modely <- rbind(originalni_modely, srovnavaci_vektor)
}
informace <- c(as.character(colnames(gt_dss)[i]), p_value, moje_aic, moje_aicc, moje_bic, ar, d, ma, rozeznani_do_tabulky,
srovnavaci_model$aic, srovnavaci_model$aicc, srovnavaci_model$bic)
ssm <- rbind(ssm, informace)
rownames(ssm)[nrow(ssm)] <- paste(as.character(end[1]),"/",as.character(end[2]),"/",as.character(i))
debil <- c(ar, d, ma)
#grafika
# Generate the fitted values
fitted_values <- arima_model$fitted
if (rozeznani_do_tabulky == "regresor"){
barvicka <- "blue"
} else {
barvicka <- "red"
}
# Plot the actual and fitted values
plot(ts_real_inf, main = paste("ARIMA(",ar,",",d,",",ma,") Fitted Values for Inflation"),
xlab = "Time", ylab = b)
lines(fitted_values, col = barvicka)
legend("topleft",
legend = c("Actual", "Fitted",
paste("p-value =", as.character(p_value)),
paste("b =", as.character(b)),
paste("end =", as.character(end)),
paste("AIC =", as.character(moje_aic)),
paste("AICc =", as.character(moje_aicc)),
paste("BIC =", as.character(moje_bic))),
lty = c(1, 1),
col = c("black", barvicka))
} else {
debug_print(colnames(gt_dss)[i])
}
}
}
}
}
}
debug_print(paste("Pocet statisticky signifikantnich promennych je", pocet_ss))
debug_print(ssm)
tabulka_arima_modelu <- rbind(tabulka_arima_modelu, ssm)
}
} else{
#write.csv(tabulka_arima_modelu, "tabulka_arima_modelu.csv", row.names = FALSE)
# Loading the dataframe with rownames
tabulka_arima_modelu <- read.csv("tabulka_arima_modelu.csv", row.names = 1)
#write.csv(gt_dss_a, "gt_dss.csv", row.names = TRUE)
gt_dss <- read.csv("gt_dss.csv", row.names = 1)
ts_real_inf <- ts(data = s_inf_cpm_s, start = c(2004, 1), frequency = 12)
ts_real_inf_3 <- ts_real_inf[-1]
ts_real_inf_3 <- ts(ts_real_inf_3, start = c(start[1], (start[2] + 1)), frequency = 12)
}
tabulka_arima_modelu
nrow(tabulka_arima_modelu)
tabulka_arima_modelu_zaloha <- tabulka_arima_modelu
tabulka_arima_modelu <- tabulka_arima_modelu_zaloha
print(tabulka_arima_modelu)
for (i in 1:nrow(tabulka_arima_modelu)) {
print(i)
if (tabulka_arima_modelu[i, "lag"] == "lag") {
tabulka_arima_modelu[i,] <- NA
}
}
tabulka_arima_modelu <- tabulka_arima_modelu[complete.cases(tabulka_arima_modelu), ]
tabulka_arima_modelu <- tabulka_arima_modelu %>%
mutate(across(c("AIC", "AICc","BIC", "sAIC", "sAICc","sBIC"), as.numeric))
tabulka_arima_modelu$model <-  tabulka_arima_modelu$AIC + tabulka_arima_modelu$AICc + tabulka_arima_modelu$BIC
tabulka_arima_modelu$benchmark <- tabulka_arima_modelu$sAIC + tabulka_arima_modelu$sAICc + tabulka_arima_modelu$sBIC
tabulka_arima_modelu$vyslednice <- tabulka_arima_modelu$model - tabulka_arima_modelu$benchmark
tabulka_arima_modelu <- tibble::rownames_to_column(tabulka_arima_modelu, var = "row_names")
tabulka_arima_modelu$row_names <- gsub("X", "", tabulka_arima_modelu$row_names)
# Replace "..." with "/" in the row_names column
tabulka_arima_modelu$row_names <- gsub("\\.\\.\\.", "/", tabulka_arima_modelu$row_names)
tabulka_arima_modelu$row_names <- gsub("(/[^/]*)/.*", "\\1", tabulka_arima_modelu$row_names)
# Print the updated dataframe
print(tabulka_arima_modelu)
min_rows <- tabulka_arima_modelu %>%
group_by(row_names) %>%
filter(model == min(model) | benchmark == min(benchmark))
# Print the resulting dataframe
print(min_rows)
end   <- c(2023, 2)
regresor <- ts(data = gt_dss[,"inflace"], start = c(2004, 1), end = end, frequency = 12)
regresor <- regresor / mean(regresor) * mean(ts_real_inf)
ext_regressor <- regresor
#future_values <- opposite_lag(ext_regressor, 1)
posun <- 1
future_values <- stats::lag(ext_regressor, posun)
ext_regressors <- ts(future_values[-(1:posun)], start = c(start[1], (start[2] + 1)), frequency = 12)
arima_model <- try(forecast::Arima(ts_real_inf_3, order = c(1,1,2), xreg = ext_regressors))
arima_model$fitted
# Combine the data into a single data frame
data <- data.frame(ts_real_inf_3, ext_regressors)
# Set up the window sizes for the rolling and expanding windows
rolling_window_size <- 70
expanding_window_size <- nrow(data) - rolling_window_size
# Set up empty vectors to store the forecasts and actuals
rolling_forecasts <- numeric()
rolling_actuals <- numeric()
expanding_forecasts <- numeric()
expanding_actuals <- numeric()
window_size <- rolling_window_size  # Length of the rolling window
n_ahead <- 1
library(forecast)
start_date <- start(ts_real_inf_3)
end_date <- end(ts_real_inf_3)
n_iterations <- length(ts_real_inf_3) - window_size - n_ahead + 1
forecasts_rw <- list()
for (i in 1:n_iterations) {
print(i/n_iterations)
start_window <- start_date + (i - 1) * c(0, 1)
end_window <- start_window + c(0, window_size - 1)
ts_window <- window(ts_real_inf_3, start = start_window, end = end_window)
ext_regressors_window <- window(ext_regressors, start = start_window, end = end_window)
tryCatch({
model <- Arima(ts_window, order = c(1, 1, 2), xreg = ext_regressors_window)
start_forecast <- end_window + c(0, 1)
end_forecast <- start_forecast + c(0, n_ahead - 1)
ext_regressors_forecast <- window(ext_regressors, start = start_forecast, end = end_forecast)
forecast_result <- forecast::forecast(model, h = n_ahead, xreg = ext_regressors_forecast)
forecasts_rw[[i]] <- forecast_result
}, error = function(e) {
cat("Error at iteration", i, ":", e$message, "\n")
})
}
# bodiky
{
point_estimates_rw <- do.call(c, lapply(forecasts_rw, function(x) x$mean))
# Print the point estimates
print(point_estimates_rw)
# Create a new time series object with the forecasted values and their respective time indexes
prec <- c(window_size )
start_forecast_all <- start_date + c(0 , window_size)
end_forecast_all <- end_date
ts_forecast <- ts(point_estimates_rw, start = start_forecast_all, end = end_forecast_all, frequency = frequency(ts_real_inf_3))
# Plot the actual and forecasted values together
ts.plot(ts_real_inf_3, ts_forecast, col = c("black", "red"), lty = c(1, 1), main = "Actual vs. Forecasted Values", xlab = "Time", ylab = "Value")
legend("topleft", legend = c("Actual", "Forecast"), col = c("black", "red"), lty = c(1, 1), bty = "n")
# Extract the actual values for which we have forecasts
actual_values <- window(ts_real_inf_3, start = start_forecast_all, end = end_forecast_all)
# Calculate quality measures
mae <- mean(abs(actual_values - point_estimates_rw))
mse <- mean((actual_values - point_estimates_rw)^2)
rmse <- sqrt(mse)
cat("Mean Absolute Error (MAE):", mae, "\n")
cat("Mean Squared Error (MSE):", mse, "\n")
cat("Root Mean Squared Error (RMSE):", rmse, "\n")
}
# Expanding window forecast
n <- length(ts_real_inf_3)
start_forecast <- 70
forecasts <- ts(numeric(n - start_forecast + 1), start = start(ts_real_inf_3)[1] + (start_forecast - 1) / frequency(ts_real_inf_3), frequency = frequency(ts_real_inf_3))
for (t in start_forecast:n) {
# Fit the ARIMA model with the external regressor on the expanding window
model <- Arima(ts_real_inf_3[1:(t - 1)], order = c(1, 1, 2), xreg = ext_regressors[1:(t - 1)])
# One-step ahead forecast
forecast <- predict(model, n.ahead = 1, newxreg = ext_regressors[t])
# Save the forecast
forecasts[t - start_forecast + 1] <- forecast$pred
}
# bodiky
{
# Print the forecasts
print(forecasts)
lines(forecasts, col = "blue")
# Calculate the errors
errors <- forecasts - ts_real_inf_3[start_forecast:n]
# Calculate MAE
mae <- mean(abs(errors))
# Calculate MSE
mse <- mean(errors^2)
# Calculate RMSE
rmse <- sqrt(mse)
# Print the results
cat("Mean Absolute Error (MAE):", mae, "\n")
cat("Mean Squared Error (MSE):", mse, "\n")
cat("Root Mean Squared Error (RMSE):", rmse, "\n")
}
save.image("C:/Users/N/Documents/Desktop/diploma/env1.RData")
remove_and_fit_arima <- function(ts_real_inf_3, ext_regressors, remove_n = start_forecast) {
# Removing the first remove_n observations
ts_real_inf_3_trimmed <- window(ts_real_inf_3, start = remove_n + 1)
ext_regressors_trimmed <- window(ext_regressors, start = remove_n + 1)
# Fitting the ARIMA model
arima_model <- tryCatch(forecast::Arima(ts_real_inf_3_trimmed, order = c(1, 1, 2), xreg = ext_regressors_trimmed),
error = function(e) {
cat("Error:", e$message, "\n")
return(NULL)
})
if (!is.null(arima_model)) {
# Forecasting
forecast_result <- forecast::forecast(arima_model, h = 1, xreg = ext_regressors_trimmed)
# Calculating errors
actual <- ts_real_inf_3_trimmed
predicted <- forecast_result$mean
mae <- mean(abs(actual - predicted), na.rm = TRUE)
mse <- mean((actual - predicted)^2, na.rm = TRUE)
rmse <- sqrt(mse)
# Printing the error metrics
cat("MAE:", mae, "\n")
cat("MSE:", mse, "\n")
cat("RMSE:", rmse, "\n")
}
}
# Usage:
remove_and_fit_arima(ts_real_inf_3, ext_regressors, remove_n = 10)
remove_and_fit_arima <- function(ts_real_inf_3, ext_regressors, remove_n = 0) {
# Removing the first remove_n observations
ts_real_inf_3_trimmed <- window(ts_real_inf_3, start = start_forecast_all)
ext_regressors_trimmed <- window(ext_regressors, start = start_forecast_all)
# Fitting the ARIMA model
arima_model <- tryCatch(forecast::Arima(ts_real_inf_3_trimmed, order = c(1, 1, 2), xreg = ext_regressors_trimmed),
error = function(e) {
cat("Error:", e$message, "\n")
return(NULL)
})
if (!is.null(arima_model)) {
# Forecasting
forecast_result <- forecast::forecast(arima_model, h = 1, xreg = ext_regressors_trimmed)
# Calculating errors
actual <- ts_real_inf_3_trimmed
predicted <- forecast_result$mean
mae <- mean(abs(actual - predicted), na.rm = TRUE)
mse <- mean((actual - predicted)^2, na.rm = TRUE)
rmse <- sqrt(mse)
# Printing the error metrics
cat("MAE:", mae, "\n")
cat("MSE:", mse, "\n")
cat("RMSE:", rmse, "\n")
}
}
# Usage:
remove_and_fit_arima(ts_real_inf_3, ext_regressors)
